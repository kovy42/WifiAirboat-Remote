
WifiRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00000fc2  00001056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ae  008000ee  008000ee  000010e4  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007da  00000000  00000000  00003250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d8  00000000  00000000  00003a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000025c8  00000000  00000000  00003d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a54  00000000  00000000  000062f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000de7  00000000  00000000  00006d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000854  00000000  00000000  00007b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000097d  00000000  00000000  00008388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ebf  00000000  00000000  00008d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000278  00000000  00000000  0000abc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 67 00 	jmp	0xce	; 0xce <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_13>
  38:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_14>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	c8 01       	movw	r24, r16
  56:	c8 01       	movw	r24, r16
  58:	c8 01       	movw	r24, r16
  5a:	c8 01       	movw	r24, r16
  5c:	c8 01       	movw	r24, r16
  5e:	de 01       	movw	r26, r28
  60:	de 01       	movw	r26, r28
  62:	e0 01       	movw	r28, r0
  64:	ca 01       	movw	r24, r20
  66:	ca 01       	movw	r24, r20
  68:	ca 01       	movw	r24, r20
  6a:	ca 01       	movw	r24, r20
  6c:	cc 01       	movw	r24, r24
  6e:	cc 01       	movw	r24, r24
  70:	cc 01       	movw	r24, r24
  72:	cc 01       	movw	r24, r24
  74:	de 01       	movw	r26, r28
  76:	de 01       	movw	r26, r28
  78:	ce 01       	movw	r24, r28
  7a:	ce 01       	movw	r24, r28
  7c:	ce 01       	movw	r24, r28
  7e:	ce 01       	movw	r24, r28
  80:	ce 01       	movw	r24, r28
  82:	de 01       	movw	r26, r28
  84:	de 01       	movw	r26, r28
  86:	d0 01       	movw	r26, r0
  88:	d0 01       	movw	r26, r0
  8a:	d0 01       	movw	r26, r0
  8c:	d0 01       	movw	r26, r0
  8e:	de 01       	movw	r26, r28
  90:	de 01       	movw	r26, r28
  92:	de 01       	movw	r26, r28
  94:	d2 01       	movw	r26, r4
  96:	d2 01       	movw	r26, r4
  98:	d2 01       	movw	r26, r4
  9a:	d2 01       	movw	r26, r4
  9c:	d2 01       	movw	r26, r4
  9e:	de 01       	movw	r26, r28
  a0:	de 01       	movw	r26, r28
  a2:	d4 01       	movw	r26, r8
  a4:	d6 01       	movw	r26, r12
  a6:	d6 01       	movw	r26, r12
  a8:	d6 01       	movw	r26, r12
  aa:	d6 01       	movw	r26, r12
  ac:	d8 01       	movw	r26, r16
  ae:	d8 01       	movw	r26, r16
  b0:	d8 01       	movw	r26, r16
  b2:	d8 01       	movw	r26, r16
  b4:	de 01       	movw	r26, r28
  b6:	de 01       	movw	r26, r28
  b8:	da 01       	movw	r26, r20
  ba:	da 01       	movw	r26, r20
  bc:	da 01       	movw	r26, r20
  be:	da 01       	movw	r26, r20
  c0:	da 01       	movw	r26, r20
  c2:	de 01       	movw	r26, r28
  c4:	de 01       	movw	r26, r28
  c6:	dc 01       	movw	r26, r24
  c8:	dc 01       	movw	r26, r24
  ca:	dc 01       	movw	r26, r24
  cc:	dc 01       	movw	r26, r24

000000ce <__ctors_end>:
  ce:	11 24       	eor	r1, r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	cf e5       	ldi	r28, 0x5F	; 95
  d4:	d8 e0       	ldi	r29, 0x08	; 8
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
  da:	10 e0       	ldi	r17, 0x00	; 0
  dc:	a0 e6       	ldi	r26, 0x60	; 96
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e2 ec       	ldi	r30, 0xC2	; 194
  e2:	ff e0       	ldi	r31, 0x0F	; 15
  e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	ae 3e       	cpi	r26, 0xEE	; 238
  ec:	b1 07       	cpc	r27, r17
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	ae ee       	ldi	r26, 0xEE	; 238
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	ac 39       	cpi	r26, 0x9C	; 156
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 e7 04 	call	0x9ce	; 0x9ce <main>
 104:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <adc_init>:
******************************************************************************/

void adc_init(void){
	
	// Configuration des broches utilisées du port A en entrée (Entre PA0 et PA7)	
	DDRA = clear_bit(DDRA,PA0);
 10c:	d0 98       	cbi	0x1a, 0	; 26
	DDRA = clear_bit(DDRA,PA1);
 10e:	d1 98       	cbi	0x1a, 1	; 26

	// Sélectionner la référence de tension: la tension d'alimentation (AVCC)
	ADMUX = clear_bit(ADMUX, REFS1);
 110:	3f 98       	cbi	0x07, 7	; 7
	ADMUX = set_bit(ADMUX, REFS0);
 112:	3e 9a       	sbi	0x07, 6	; 7
    

	// Choisir le format du résultat de conversion: shift à gauche pour que
	// les 8 MSB se retrouvent dans le registre ADCH
	ADMUX = set_bit(ADMUX,ADLAR);
 114:	3d 9a       	sbi	0x07, 5	; 7

	// Choisir un facteur de division d'horloge (64) afin que l'horloge ait
	// une fréquence entre 50kHz et 200kHz. Donc 8MHz/64 = 125kHz.
	ADCSRA = set_bit(ADCSRA,ADPS2);
 116:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA = set_bit(ADCSRA,ADPS1);
 118:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA = clear_bit(ADCSRA,ADPS0);
 11a:	30 98       	cbi	0x06, 0	; 6

	// Activer le CAN
	ADCSRA = set_bit(ADCSRA,ADEN);
 11c:	37 9a       	sbi	0x06, 7	; 6
 11e:	08 95       	ret

00000120 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
	
	// Choisir l'entrée analogique (broche) à convertir 
	ADMUX = write_bits(ADMUX, 0b00011111, channel);
 120:	97 b1       	in	r25, 0x07	; 7
 122:	8f 71       	andi	r24, 0x1F	; 31
 124:	90 7e       	andi	r25, 0xE0	; 224
 126:	98 2b       	or	r25, r24
 128:	97 b9       	out	0x07, r25	; 7

	// Démarrage d'une conversion 
	ADCSRA = set_bit(ADCSRA,ADSC);
 12a:	36 9a       	sbi	0x06, 6	; 6
	
	// Attente de la fin de la conversion
	
	while(read_bit(ADCSRA,ADSC) == 1){
 12c:	36 99       	sbic	0x06, 6	; 6
 12e:	fe cf       	rjmp	.-4      	; 0x12c <adc_read+0xc>
		
	}
	
	// Lecture et renvoie du résultat
	return ADCH;
 130:	85 b1       	in	r24, 0x05	; 5
	
}
 132:	08 95       	ret

00000134 <servo_init>:

void servo_init(void){
	
	
	// Configuration des broches de sortie
	DDRD = set_bit(DDRD,PD5);
 134:	8d 9a       	sbi	0x11, 5	; 17
	//DDRD = set_bit(DDRD,PD4);
	
	// Configuration du compteur et du comparateur
	TCCR1A = set_bit(TCCR1A,COM1A1);
 136:	8f b5       	in	r24, 0x2f	; 47
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A = set_bit(TCCR1A,COM1B1);
 13c:	8f b5       	in	r24, 0x2f	; 47
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A = clear_bit(TCCR1A,COM1B0);
 142:	8f b5       	in	r24, 0x2f	; 47
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	8f bd       	out	0x2f, r24	; 47
	TCCR1A = clear_bit(TCCR1A,COM1A0);
 148:	8f b5       	in	r24, 0x2f	; 47
 14a:	8f 7b       	andi	r24, 0xBF	; 191
 14c:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1A = set_bit(TCCR1A,WGM11);
 14e:	8f b5       	in	r24, 0x2f	; 47
 150:	82 60       	ori	r24, 0x02	; 2
 152:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B = set_bit(TCCR1B,WGM13);
 154:	8e b5       	in	r24, 0x2e	; 46
 156:	80 61       	ori	r24, 0x10	; 16
 158:	8e bd       	out	0x2e, r24	; 46
	TCCR1B = set_bit(TCCR1B,WGM12);
 15a:	8e b5       	in	r24, 0x2e	; 46
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	8e bd       	out	0x2e, r24	; 46

	// Configuration de la valeur maximale du compteur (top) à 20000
	ICR1 = write_bits(ICR1,0b1111111111111111,0b0100111000100000);
 160:	86 b5       	in	r24, 0x26	; 38
 162:	97 b5       	in	r25, 0x27	; 39
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	9e e4       	ldi	r25, 0x4E	; 78
 168:	97 bd       	out	0x27, r25	; 39
 16a:	86 bd       	out	0x26, r24	; 38
	
	// Initialiser la valeur du compteur à 0
	TCNT1 = write_bits(TCNT1,0b1111111111111111,0b0000000000000000);
 16c:	8c b5       	in	r24, 0x2c	; 44
 16e:	9d b5       	in	r25, 0x2d	; 45
 170:	1d bc       	out	0x2d, r1	; 45
 172:	1c bc       	out	0x2c, r1	; 44

	// Démarrer le compteur et fixer un facteur de division de fréquence à 8
	TCCR1B = clear_bit(TCCR1B,CS12);
 174:	8e b5       	in	r24, 0x2e	; 46
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	8e bd       	out	0x2e, r24	; 46
	TCCR1B = set_bit(TCCR1B,CS11);
 17a:	8e b5       	in	r24, 0x2e	; 46
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B = clear_bit(TCCR1B,CS10);
 180:	8e b5       	in	r24, 0x2e	; 46
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	8e bd       	out	0x2e, r24	; 46
 186:	08 95       	ret

00000188 <pwm_init>:
	// Modification du rapport cyclique du PWM du servomoteur (Timer 1, PD4 - OC1B)

}

void pwm_init(bool init_a, bool init_b){
	if(init_a){
 188:	88 23       	and	r24, r24
 18a:	51 f0       	breq	.+20     	; 0x1a0 <pwm_init+0x18>
		// Configuration des broches de sortie
		
		DDRB = set_bit(DDRB,PB3);
 18c:	bb 9a       	sbi	0x17, 3	; 23
		// Configuration du compteur et du comparateur
		TCCR0 = set_bit(TCCR0,WGM00);
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	80 64       	ori	r24, 0x40	; 64
 192:	83 bf       	out	0x33, r24	; 51
		TCCR0 = set_bit(TCCR0,WGM01);
 194:	83 b7       	in	r24, 0x33	; 51
 196:	88 60       	ori	r24, 0x08	; 8
 198:	83 bf       	out	0x33, r24	; 51
		
		

		// Démarrer le compteur et fixer un facteur de division de fréquence à 1024
		TCCR0 = set_bits(TCCR0,0b00000101);
 19a:	83 b7       	in	r24, 0x33	; 51
 19c:	85 60       	ori	r24, 0x05	; 5
 19e:	83 bf       	out	0x33, r24	; 51
	}
	if(init_b){
 1a0:	66 23       	and	r22, r22
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <pwm_init+0x30>
		// Configuration des broches de sortie
		
		DDRD = set_bit(DDRD,PD7);
 1a4:	8f 9a       	sbi	0x11, 7	; 17
		// Configuration du compteur et du comparateur
		TCCR2 = set_bit(TCCR2,WGM20);
 1a6:	85 b5       	in	r24, 0x25	; 37
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	85 bd       	out	0x25, r24	; 37
		TCCR2 = set_bit(TCCR2,WGM21);
 1ac:	85 b5       	in	r24, 0x25	; 37
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	85 bd       	out	0x25, r24	; 37
		
		

		// Démarrer le compteur et fixer un facteur de division de fréquence à 1024
		TCCR2 = set_bits(TCCR2,0b00000111);
 1b2:	85 b5       	in	r24, 0x25	; 37
 1b4:	87 60       	ori	r24, 0x07	; 7
 1b6:	85 bd       	out	0x25, r24	; 37
 1b8:	08 95       	ret

000001ba <fifo_init>:

/******************************************************************************
Global functions
******************************************************************************/

void fifo_init(fifo_t* fifo, uint8_t* ptr_buffer, uint8_t buffer_size){
 1ba:	fc 01       	movw	r30, r24

    fifo->ptr = ptr_buffer;
 1bc:	71 83       	std	Z+1, r23	; 0x01
 1be:	60 83       	st	Z, r22
    fifo->size = buffer_size;
 1c0:	42 83       	std	Z+2, r20	; 0x02
    fifo->in_offset = 0;
 1c2:	13 82       	std	Z+3, r1	; 0x03
    fifo->out_offset = 0;
 1c4:	14 82       	std	Z+4, r1	; 0x04
    fifo->is_empty = TRUE;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	85 83       	std	Z+5, r24	; 0x05
    fifo->is_full = FALSE;
 1ca:	16 82       	std	Z+6, r1	; 0x06
 1cc:	08 95       	ret

000001ce <fifo_push>:
}


void fifo_push(fifo_t* fifo, uint8_t value){
 1ce:	fc 01       	movw	r30, r24

    /* Si le buffer est plein il n'est pas question de rien "pusher" */
    if(fifo->is_full == FALSE){
 1d0:	86 81       	ldd	r24, Z+6	; 0x06
 1d2:	81 11       	cpse	r24, r1
 1d4:	1a c0       	rjmp	.+52     	; 0x20a <fifo_push+0x3c>

        fifo->ptr[fifo->in_offset] = value;
 1d6:	83 81       	ldd	r24, Z+3	; 0x03
 1d8:	a0 81       	ld	r26, Z
 1da:	b1 81       	ldd	r27, Z+1	; 0x01
 1dc:	a8 0f       	add	r26, r24
 1de:	b1 1d       	adc	r27, r1
 1e0:	6c 93       	st	X, r22

        fifo->is_empty = FALSE;
 1e2:	15 82       	std	Z+5, r1	; 0x05

        if(fifo->in_offset == fifo->size - 1){
 1e4:	43 81       	ldd	r20, Z+3	; 0x03
 1e6:	24 2f       	mov	r18, r20
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	28 17       	cp	r18, r24
 1f2:	39 07       	cpc	r19, r25
 1f4:	11 f4       	brne	.+4      	; 0x1fa <fifo_push+0x2c>

            fifo->in_offset = 0;
 1f6:	13 82       	std	Z+3, r1	; 0x03
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <fifo_push+0x30>
        }

        else{

            fifo->in_offset++;
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	43 83       	std	Z+3, r20	; 0x03
        }

        /* si l'index de d'entrée ratrappe celui de sortie c'est que le buffer est plein */
        if(fifo->in_offset == fifo->out_offset){
 1fe:	93 81       	ldd	r25, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	98 13       	cpse	r25, r24
 204:	02 c0       	rjmp	.+4      	; 0x20a <fifo_push+0x3c>

            fifo->is_full = TRUE;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	86 83       	std	Z+6, r24	; 0x06
 20a:	08 95       	ret

0000020c <fifo_pop>:
        }
    }
}


uint8_t fifo_pop(fifo_t* fifo){
 20c:	fc 01       	movw	r30, r24

    uint8_t value;

    /* Si le buffer n'est pas vide il n'est pas question de rien "poper" */
    if(fifo->is_empty == FALSE){
 20e:	85 81       	ldd	r24, Z+5	; 0x05
 210:	81 11       	cpse	r24, r1
 212:	1b c0       	rjmp	.+54     	; 0x24a <fifo_pop+0x3e>

        value = fifo->ptr[fifo->out_offset];
 214:	94 81       	ldd	r25, Z+4	; 0x04
 216:	29 2f       	mov	r18, r25
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	a0 81       	ld	r26, Z
 21c:	b1 81       	ldd	r27, Z+1	; 0x01
 21e:	a2 0f       	add	r26, r18
 220:	b3 1f       	adc	r27, r19
 222:	8c 91       	ld	r24, X

        fifo->is_full = FALSE;
 224:	16 82       	std	Z+6, r1	; 0x06

        if(fifo->out_offset == fifo->size - 1){
 226:	42 81       	ldd	r20, Z+2	; 0x02
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	41 50       	subi	r20, 0x01	; 1
 22c:	51 09       	sbc	r21, r1
 22e:	24 17       	cp	r18, r20
 230:	35 07       	cpc	r19, r21
 232:	11 f4       	brne	.+4      	; 0x238 <fifo_pop+0x2c>

            fifo->out_offset = 0;
 234:	14 82       	std	Z+4, r1	; 0x04
 236:	02 c0       	rjmp	.+4      	; 0x23c <fifo_pop+0x30>
        }

        else{

            fifo->out_offset++;
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	94 83       	std	Z+4, r25	; 0x04
        }

        /* si l'index de sortie ratrappe celui d'entrée c'est que le buffer est vide */
        if(fifo->out_offset == fifo->in_offset){
 23c:	24 81       	ldd	r18, Z+4	; 0x04
 23e:	93 81       	ldd	r25, Z+3	; 0x03
 240:	29 13       	cpse	r18, r25
 242:	04 c0       	rjmp	.+8      	; 0x24c <fifo_pop+0x40>

            fifo->is_empty = TRUE;
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	95 83       	std	Z+5, r25	; 0x05
 248:	08 95       	ret

    else{

        /* En orienté objet je ferais une exception, mais en c le mieux que je peux faire
        c'est ça */
        value = 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
    }

    return value;
}
 24c:	08 95       	ret

0000024e <fifo_clean>:


void fifo_clean(fifo_t* fifo){
 24e:	fc 01       	movw	r30, r24
	
	fifo->in_offset = fifo->out_offset;
 250:	84 81       	ldd	r24, Z+4	; 0x04
 252:	83 83       	std	Z+3, r24	; 0x03
	fifo->is_full = FALSE;
 254:	16 82       	std	Z+6, r1	; 0x06
	fifo->is_empty = TRUE;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	85 83       	std	Z+5, r24	; 0x05
 25a:	08 95       	ret

0000025c <fifo_is_empty>:


bool fifo_is_empty(fifo_t* fifo) {

    return fifo->is_empty;
}
 25c:	fc 01       	movw	r30, r24
 25e:	85 81       	ldd	r24, Z+5	; 0x05
 260:	08 95       	ret

00000262 <fifo_is_full>:


bool fifo_is_full(fifo_t* fifo){

    return fifo->is_full;
}
 262:	fc 01       	movw	r30, r24
 264:	86 81       	ldd	r24, Z+6	; 0x06
 266:	08 95       	ret

00000268 <clock_data>:
******************************************************************************/

/* hd44780 */
void clock_data(char data){

    DATA_PORT = data;
 268:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	85 e8       	ldi	r24, 0x85	; 133
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <clock_data+0x4>
 270:	00 00       	nop

    _delay_us(50);

    FALLING_EDGE();
 272:	df 98       	cbi	0x1b, 7	; 27
 274:	85 e8       	ldi	r24, 0x85	; 133
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <clock_data+0xe>
 27a:	00 00       	nop

    _delay_us(50);

    RISING_EDGE();
 27c:	df 9a       	sbi	0x1b, 7	; 27
 27e:	08 95       	ret

00000280 <hd44780_clear_display>:
}


void hd44780_clear_display(){

    COMMAND_MODE();
 280:	dd 98       	cbi	0x1b, 5	; 27

    clock_data(0b00000001);     //Clear Display
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 34 01 	call	0x268	; 0x268 <clock_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	8f e9       	ldi	r24, 0x9F	; 159
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <hd44780_clear_display+0xc>
 290:	00 c0       	rjmp	.+0      	; 0x292 <hd44780_clear_display+0x12>
 292:	00 00       	nop
	// Cette information n'est nulle part dans la datasheet, mais a plutôt été trouvée
	// par essaie erreur. Une bonne solution pour régler le problème sera de relire le busy
	// flag
	_delay_ms(2);

    DATA_MODE();
 294:	dd 9a       	sbi	0x1b, 5	; 27
 296:	08 95       	ret

00000298 <hd44780_set_entry_mode>:

void hd44780_set_entry_mode(bool increment){

    uint8_t increment_decrement;

    if(increment == TRUE){
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <hd44780_set_entry_mode+0x8>

        increment_decrement = 0b00000010;
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <hd44780_set_entry_mode+0xa>
    }
	
	else{

        increment_decrement = 0b00000000;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
    }

    COMMAND_MODE();
 2a2:	dd 98       	cbi	0x1b, 5	; 27

    clock_data(0b00000100 | increment_decrement);     //Entry mode set
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	0e 94 34 01 	call	0x268	; 0x268 <clock_data>

    DATA_MODE();
 2aa:	dd 9a       	sbi	0x1b, 5	; 27
 2ac:	08 95       	ret

000002ae <hd44780_set_display_control>:

void hd44780_set_display_control(bool display, bool cursor, bool blink){

    uint8_t dcb = 0;

    if(display == TRUE){
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	11 f0       	breq	.+4      	; 0x2b6 <hd44780_set_display_control+0x8>
}


void hd44780_set_display_control(bool display, bool cursor, bool blink){

    uint8_t dcb = 0;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <hd44780_set_display_control+0xa>

    if(display == TRUE){

        dcb = set_bit(dcb, 2);
 2b6:	84 e0       	ldi	r24, 0x04	; 4
    }

    if(cursor == TRUE){
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	09 f4       	brne	.+2      	; 0x2be <hd44780_set_display_control+0x10>

        dcb = set_bit(dcb, 1);
 2bc:	82 60       	ori	r24, 0x02	; 2
    }

    if(blink == TRUE){
 2be:	41 30       	cpi	r20, 0x01	; 1
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <hd44780_set_display_control+0x16>

        dcb = set_bit(dcb, 0);
 2c2:	81 60       	ori	r24, 0x01	; 1
    }

    COMMAND_MODE();
 2c4:	dd 98       	cbi	0x1b, 5	; 27

    clock_data(0b00001000 | dcb);     //Display on/off control
 2c6:	88 60       	ori	r24, 0x08	; 8
 2c8:	0e 94 34 01 	call	0x268	; 0x268 <clock_data>

    DATA_MODE();
 2cc:	dd 9a       	sbi	0x1b, 5	; 27
 2ce:	08 95       	ret

000002d0 <hd44780_init>:

/******************************************************************************
Global functions HD44780
******************************************************************************/

void hd44780_init(bool increment, bool cursor, bool blink){
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	c6 2f       	mov	r28, r22
 2d6:	d4 2f       	mov	r29, r20

    //On définie la valeur par défaut des ports
    DATA_PORT = FUNCTION_SET;
 2d8:	98 e3       	ldi	r25, 0x38	; 56
 2da:	95 bb       	out	0x15, r25	; 21
    CTRL_PORT = clear_bit(CTRL_PORT, RS_PIN);   //command mode
 2dc:	dd 98       	cbi	0x1b, 5	; 27
    CTRL_PORT = clear_bit(CTRL_PORT, RW_PIN);   //write mode
 2de:	de 98       	cbi	0x1b, 6	; 27

	// On change la direction des ports
    DATA_DDR = 0xFF;
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	94 bb       	out	0x14, r25	; 20
    CTRL_DDR = set_bits(CTRL_DDR, (1 << E_PIN) | (1 << RW_PIN) | (1 << RS_PIN));
 2e4:	9a b3       	in	r25, 0x1a	; 26
 2e6:	90 6e       	ori	r25, 0xE0	; 224
 2e8:	9a bb       	out	0x1a, r25	; 26
 2ea:	ef e1       	ldi	r30, 0x1F	; 31
 2ec:	fe e4       	ldi	r31, 0x4E	; 78
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <hd44780_init+0x1e>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <hd44780_init+0x24>
 2f4:	00 00       	nop

    //initial wait
    _delay_ms(10);       //10ms

    FALLING_EDGE();
 2f6:	df 98       	cbi	0x1b, 7	; 27
 2f8:	ef e0       	ldi	r30, 0x0F	; 15
 2fa:	f7 e2       	ldi	r31, 0x27	; 39
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <hd44780_init+0x2c>
 300:	00 c0       	rjmp	.+0      	; 0x302 <hd44780_init+0x32>
 302:	00 00       	nop

    _delay_ms(5);       //4.1ms /

    RISING_EDGE();
 304:	df 9a       	sbi	0x1b, 7	; 27
 306:	ef e0       	ldi	r30, 0x0F	; 15
 308:	f7 e2       	ldi	r31, 0x27	; 39
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <hd44780_init+0x3a>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <hd44780_init+0x40>
 310:	00 00       	nop

    _delay_ms(5);       //4.1ms /

    FALLING_EDGE();
 312:	df 98       	cbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	e7 ec       	ldi	r30, 0xC7	; 199
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <hd44780_init+0x48>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <hd44780_init+0x4e>
 31e:	00 00       	nop

    _delay_us(100);       //100us /

    RISING_EDGE();
 320:	df 9a       	sbi	0x1b, 7	; 27
 322:	e7 ec       	ldi	r30, 0xC7	; 199
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <hd44780_init+0x56>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <hd44780_init+0x5c>
 32c:	00 00       	nop

    _delay_us(100);       //100us /

    FALLING_EDGE();
 32e:	df 98       	cbi	0x1b, 7	; 27
 330:	ef ef       	ldi	r30, 0xFF	; 255
 332:	f5 e0       	ldi	r31, 0x05	; 5
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <hd44780_init+0x64>
 338:	00 c0       	rjmp	.+0      	; 0x33a <hd44780_init+0x6a>
 33a:	00 00       	nop

    _delay_us(768);       //100us /

    RISING_EDGE();
 33c:	df 9a       	sbi	0x1b, 7	; 27

    hd44780_set_entry_mode(increment);
 33e:	0e 94 4c 01 	call	0x298	; 0x298 <hd44780_set_entry_mode>
    hd44780_set_display_control(TRUE, cursor, blink);
 342:	4d 2f       	mov	r20, r29
 344:	6c 2f       	mov	r22, r28
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 57 01 	call	0x2ae	; 0x2ae <hd44780_set_display_control>
    hd44780_clear_display();
 34c:	0e 94 40 01 	call	0x280	; 0x280 <hd44780_clear_display>
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <hd44780_set_cursor_position>:
void hd44780_set_cursor_position(uint8_t col, uint8_t row){

    uint8_t address = 0;

    //On commence par ajouter le offset de la ligne
    switch(row){
 356:	61 30       	cpi	r22, 0x01	; 1
 358:	11 f0       	breq	.+4      	; 0x35e <hd44780_set_cursor_position+0x8>
}


void hd44780_set_cursor_position(uint8_t col, uint8_t row){

    uint8_t address = 0;
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	01 c0       	rjmp	.+2      	; 0x360 <hd44780_set_cursor_position+0xa>
        address += 0x00;
        break;

    case 1:

        address += 0x40;
 35e:	90 e4       	ldi	r25, 0x40	; 64
    }

    //Puis on ajoute le offset de la colone
    address += col;

    COMMAND_MODE();
 360:	dd 98       	cbi	0x1b, 5	; 27
        address += 0x40;
        break;
    }

    //Puis on ajoute le offset de la colone
    address += col;
 362:	89 0f       	add	r24, r25

    COMMAND_MODE();

    clock_data(0b10000000 | address);     //Set DDRAM address
 364:	80 68       	ori	r24, 0x80	; 128
 366:	0e 94 34 01 	call	0x268	; 0x268 <clock_data>

    DATA_MODE();
 36a:	dd 9a       	sbi	0x1b, 5	; 27
 36c:	08 95       	ret

0000036e <hd44780_write_char>:
	const char MAX_CHAR = 255;
#else
	const char MAX_CHAR = CHAR_LEFT_ARROW;
#endif

    DATA_MODE();
 36e:	dd 9a       	sbi	0x1b, 5	; 27

    if((character >= ' ') && (character <= MAX_CHAR)){
 370:	80 32       	cpi	r24, 0x20	; 32
 372:	18 f0       	brcs	.+6      	; 0x37a <hd44780_write_char+0xc>

            clock_data(character);
 374:	0e 94 34 01 	call	0x268	; 0x268 <clock_data>
 378:	08 95       	ret
    }

    else{
		
		switch(character){
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	fc 01       	movw	r30, r24
 37e:	e0 5c       	subi	r30, 0xC0	; 192
 380:	f1 09       	sbc	r31, r1
 382:	ed 33       	cpi	r30, 0x3D	; 61
 384:	f1 05       	cpc	r31, r1
 386:	d0 f4       	brcc	.+52     	; 0x3bc <hd44780_write_char+0x4e>
 388:	e6 5d       	subi	r30, 0xD6	; 214
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__tablejump2__>
		case 0xC0:	//À
		case 0xC1:	//A accent aigue
		case 0xC2:	//Â
		case 0xC3:	//A ???
		case 0xC4:	//Ä
			character = 'A';
 390:	81 e4       	ldi	r24, 0x41	; 65
 392:	17 c0       	rjmp	.+46     	; 0x3c2 <hd44780_write_char+0x54>
					
		case 0xC8:	//È
		case 0xC9:	//É
		case 0xCA:	//Ê
		case 0xCB:	//Ë
			character = 'E';
 394:	85 e4       	ldi	r24, 0x45	; 69
			break;
 396:	15 c0       	rjmp	.+42     	; 0x3c2 <hd44780_write_char+0x54>
					
		case 0xCC:	//Ì
		case 0xCD:	//I accent aigue
		case 0xCE:	//Î
		case 0xCF:	//Ï
			character = 'I';
 398:	89 e4       	ldi	r24, 0x49	; 73
			break;
 39a:	13 c0       	rjmp	.+38     	; 0x3c2 <hd44780_write_char+0x54>
		case 0xD2:	//Ò
		case 0xD3:	//O accent aigue
		case 0xD4:	//Ô
		case 0xD5:	//O ???
		case 0xD6:	//Ö
			character = 'O';
 39c:	8f e4       	ldi	r24, 0x4F	; 79
			break;
 39e:	11 c0       	rjmp	.+34     	; 0x3c2 <hd44780_write_char+0x54>
					
		case 0xD9:	//Ù
		case 0xDA:	//U accent aigue
		case 0xDB:	//Û
		case 0xDC:	//Ü
			character = 'U';
 3a0:	85 e5       	ldi	r24, 0x55	; 85
			break;
 3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <hd44780_write_char+0x54>
		case 0xE0:	//à
		case 0xE1:	//a accent aigue
		case 0xE2:	//â
		case 0xE3:	//a ???
		case 0xE4:	//ä
			character = 'a';
 3a4:	81 e6       	ldi	r24, 0x61	; 97
			break;
 3a6:	0d c0       	rjmp	.+26     	; 0x3c2 <hd44780_write_char+0x54>
		
		case 0xE7:	//ç
			character = 'c';
 3a8:	83 e6       	ldi	r24, 0x63	; 99
			break;
 3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <hd44780_write_char+0x54>
			
		case 0xE8:	//è
		case 0xE9:	//é
		case 0xEA:	//ê
		case 0xEB:	//ë
			character = 'e';
 3ac:	85 e6       	ldi	r24, 0x65	; 101
			break;
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <hd44780_write_char+0x54>
			
		case 0xEC:	//ì
		case 0xED:	//i accent aigue
		case 0xEE:	//î
		case 0xEF:	//ï
			character = 'i';
 3b0:	89 e6       	ldi	r24, 0x69	; 105
			break;
 3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <hd44780_write_char+0x54>
		case 0xF2:	//ò
		case 0xF3:	//o accent aigue
		case 0xF4:	//ô
		case 0xF5:	//o ???
		case 0xF6:	//ö
			character = 'o';
 3b4:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <hd44780_write_char+0x54>
			
		case 0xF9:	//ù
		case 0xFA:	//u accent aigue
		case 0xFB:	//û
		case 0xFC:	//ü
			character = 'u';
 3b8:	85 e7       	ldi	r24, 0x75	; 117
			break;
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <hd44780_write_char+0x54>
		
		default:
			character = 0b10100101;  //une boule pas rapport
 3bc:	85 ea       	ldi	r24, 0xA5	; 165
			break;
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <hd44780_write_char+0x54>
		case 0xC4:	//Ä
			character = 'A';
			break;
					
		case 0xC7:	//Ç
			character = 'C';
 3c0:	83 e4       	ldi	r24, 0x43	; 67
		default:
			character = 0b10100101;  //une boule pas rapport
			break;
		}				

        clock_data(character);  //une boule pas rapport
 3c2:	0e 94 34 01 	call	0x268	; 0x268 <clock_data>
 3c6:	08 95       	ret

000003c8 <lcd_init>:
Global functions LCD
******************************************************************************/

void lcd_init(void){

    hd44780_init(TRUE, TRUE, FALSE);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 68 01 	call	0x2d0	; 0x2d0 <hd44780_init>

    local_index = 0;
 3d2:	10 92 ee 00 	sts	0x00EE, r1
	clear_required_flag = FALSE;
 3d6:	10 92 ef 00 	sts	0x00EF, r1
 3da:	08 95       	ret

000003dc <lcd_clear_display>:
}


void lcd_clear_display(){

    hd44780_clear_display();
 3dc:	0e 94 40 01 	call	0x280	; 0x280 <hd44780_clear_display>

    local_index = 0;
 3e0:	10 92 ee 00 	sts	0x00EE, r1
 3e4:	08 95       	ret

000003e6 <index_to_col>:
/* lcd */

uint8_t index_to_col(uint8_t index){

    return index % LCD_NB_COL;
}
 3e6:	8f 70       	andi	r24, 0x0F	; 15
 3e8:	08 95       	ret

000003ea <index_to_row>:


uint8_t index_to_row(uint8_t index){

    return index / LCD_NB_COL;
}
 3ea:	82 95       	swap	r24
 3ec:	8f 70       	andi	r24, 0x0F	; 15
 3ee:	08 95       	ret

000003f0 <shift_local_index>:

bool shift_local_index(bool foward){
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	18 2f       	mov	r17, r24

    uint8_t previous_row;

    previous_row = index_to_row(local_index);
 3f8:	c0 91 ee 00 	lds	r28, 0x00EE
 3fc:	8c 2f       	mov	r24, r28
 3fe:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 402:	d8 2f       	mov	r29, r24

    /* Si on est dans le sens foward */
    if(foward == TRUE){
 404:	11 30       	cpi	r17, 0x01	; 1
 406:	49 f4       	brne	.+18     	; 0x41a <shift_local_index+0x2a>

        /* Si on est à la fin */
        if(local_index >= MAX_INDEX - 1){
 408:	cf 31       	cpi	r28, 0x1F	; 31
 40a:	18 f0       	brcs	.+6      	; 0x412 <shift_local_index+0x22>

			local_index = 0;
 40c:	10 92 ee 00 	sts	0x00EE, r1
 410:	0d c0       	rjmp	.+26     	; 0x42c <shift_local_index+0x3c>
        }

        else{

            local_index++;
 412:	cf 5f       	subi	r28, 0xFF	; 255
 414:	c0 93 ee 00 	sts	0x00EE, r28
 418:	09 c0       	rjmp	.+18     	; 0x42c <shift_local_index+0x3c>

    /* Si on est dans le sens décrémental foward ou incrémental backward*/
    else{

        /* Si on est au début */
        if(local_index <= 0){
 41a:	c1 11       	cpse	r28, r1
 41c:	04 c0       	rjmp	.+8      	; 0x426 <shift_local_index+0x36>
			
            local_index = MAX_INDEX - 1;
 41e:	8f e1       	ldi	r24, 0x1F	; 31
 420:	80 93 ee 00 	sts	0x00EE, r24
 424:	03 c0       	rjmp	.+6      	; 0x42c <shift_local_index+0x3c>
        }

        else{

            local_index--;
 426:	c1 50       	subi	r28, 0x01	; 1
 428:	c0 93 ee 00 	sts	0x00EE, r28
        }
    }

    /* Si la row actuelle ne correspond pas à l'ancienne il va falloir manuellement
    déplacer le curseur */
    return (previous_row != index_to_row(local_index));
 42c:	80 91 ee 00 	lds	r24, 0x00EE
 430:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	8d 13       	cpse	r24, r29
 438:	01 c0       	rjmp	.+2      	; 0x43c <shift_local_index+0x4c>
 43a:	90 e0       	ldi	r25, 0x00	; 0
}
 43c:	89 2f       	mov	r24, r25
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	08 95       	ret

00000446 <lcd_shift_cursor>:
        local_index = col + row * LCD_NB_COL;
    }
}


void lcd_shift_cursor(lcd_shift_e shift){
 446:	cf 93       	push	r28
 448:	df 93       	push	r29

    switch(shift){
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	49 f1       	breq	.+82     	; 0x4a0 <lcd_shift_cursor+0x5a>
 44e:	20 f4       	brcc	.+8      	; 0x458 <lcd_shift_cursor+0x12>
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	81 f0       	breq	.+32     	; 0x474 <lcd_shift_cursor+0x2e>
 454:	98 f4       	brcc	.+38     	; 0x47c <lcd_shift_cursor+0x36>
 456:	0a c0       	rjmp	.+20     	; 0x46c <lcd_shift_cursor+0x26>
 458:	85 30       	cpi	r24, 0x05	; 5
 45a:	f1 f1       	breq	.+124    	; 0x4d8 <lcd_shift_cursor+0x92>
 45c:	98 f1       	brcs	.+102    	; 0x4c4 <lcd_shift_cursor+0x7e>
 45e:	86 30       	cpi	r24, 0x06	; 6
 460:	09 f4       	brne	.+2      	; 0x464 <lcd_shift_cursor+0x1e>
 462:	43 c0       	rjmp	.+134    	; 0x4ea <lcd_shift_cursor+0xa4>
 464:	87 30       	cpi	r24, 0x07	; 7
 466:	09 f0       	breq	.+2      	; 0x46a <lcd_shift_cursor+0x24>
 468:	4b c0       	rjmp	.+150    	; 0x500 <lcd_shift_cursor+0xba>
 46a:	45 c0       	rjmp	.+138    	; 0x4f6 <lcd_shift_cursor+0xb0>
    case LCD_SHIFT_RIGHT:

        shift_local_index(TRUE);
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <shift_local_index>

        break;
 472:	46 c0       	rjmp	.+140    	; 0x500 <lcd_shift_cursor+0xba>

    case LCD_SHIFT_LEFT:

        shift_local_index(FALSE);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <shift_local_index>

        break;
 47a:	42 c0       	rjmp	.+132    	; 0x500 <lcd_shift_cursor+0xba>

    case LCD_SHIFT_UP:

		// Si on est sur la ligne du haut
        if(index_to_row(local_index) <= 0){
 47c:	c0 91 ee 00 	lds	r28, 0x00EE
 480:	8c 2f       	mov	r24, r28
 482:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 486:	81 11       	cpse	r24, r1
 488:	07 c0       	rjmp	.+14     	; 0x498 <lcd_shift_cursor+0x52>

			// On se rend à la fin moins une ligne
            local_index += (MAX_INDEX - LCD_NB_COL);
 48a:	c0 5f       	subi	r28, 0xF0	; 240
 48c:	c0 93 ee 00 	sts	0x00EE, r28
			
			clear_required_flag = TRUE;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 ef 00 	sts	0x00EF, r24
 496:	34 c0       	rjmp	.+104    	; 0x500 <lcd_shift_cursor+0xba>
        }

        else{
			
			// On recule d'une ligne
            local_index -= LCD_NB_COL;
 498:	c0 51       	subi	r28, 0x10	; 16
 49a:	c0 93 ee 00 	sts	0x00EE, r28
 49e:	30 c0       	rjmp	.+96     	; 0x500 <lcd_shift_cursor+0xba>
        break;

    case LCD_SHIFT_DOWN:

		// Si on est rendu à la dernière ligne
        if(index_to_row(local_index) >= LCD_NB_ROW - 1){
 4a0:	c0 91 ee 00 	lds	r28, 0x00EE
 4a4:	8c 2f       	mov	r24, r28
 4a6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 4aa:	88 23       	and	r24, r24
 4ac:	39 f0       	breq	.+14     	; 0x4bc <lcd_shift_cursor+0x76>

			// On ne garde que le numéro de colone (donc sa ramène sur la première ligne)
            local_index %= LCD_NB_COL;
 4ae:	cf 70       	andi	r28, 0x0F	; 15
 4b0:	c0 93 ee 00 	sts	0x00EE, r28
			
			clear_required_flag = TRUE;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 ef 00 	sts	0x00EF, r24
 4ba:	22 c0       	rjmp	.+68     	; 0x500 <lcd_shift_cursor+0xba>
        }

        else{

			// On avance d'une ligne
            local_index += LCD_NB_COL;
 4bc:	c0 5f       	subi	r28, 0xF0	; 240
 4be:	c0 93 ee 00 	sts	0x00EE, r28
 4c2:	1e c0       	rjmp	.+60     	; 0x500 <lcd_shift_cursor+0xba>

        break;
	
	case LCD_SHIFT_END:
	
		local_index = ((index_to_row(local_index) + 1) * LCD_NB_COL) - 1;
 4c4:	80 91 ee 00 	lds	r24, 0x00EE
 4c8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 4cc:	82 95       	swap	r24
 4ce:	80 7f       	andi	r24, 0xF0	; 240
 4d0:	81 5f       	subi	r24, 0xF1	; 241
 4d2:	80 93 ee 00 	sts	0x00EE, r24
		
		break;
 4d6:	14 c0       	rjmp	.+40     	; 0x500 <lcd_shift_cursor+0xba>
		
	case LCD_SHIFT_START:
		
		local_index = index_to_row(local_index) * LCD_NB_COL;
 4d8:	80 91 ee 00 	lds	r24, 0x00EE
 4dc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 4e0:	82 95       	swap	r24
 4e2:	80 7f       	andi	r24, 0xF0	; 240
 4e4:	80 93 ee 00 	sts	0x00EE, r24
		
		break;
 4e8:	0b c0       	rjmp	.+22     	; 0x500 <lcd_shift_cursor+0xba>
		
	case LCD_SHIFT_TOP:
	
		// On ne garde que le numéro de colone (donc sa ramène sur la première ligne)
		local_index %= LCD_NB_COL;
 4ea:	80 91 ee 00 	lds	r24, 0x00EE
 4ee:	8f 70       	andi	r24, 0x0F	; 15
 4f0:	80 93 ee 00 	sts	0x00EE, r24
		
		break;
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <lcd_shift_cursor+0xba>
		
	case LCD_SHIFT_BOTTOM:
		
		// On se rend à la fin moins une ligne
		local_index += (MAX_INDEX - LCD_NB_COL);
 4f6:	80 91 ee 00 	lds	r24, 0x00EE
 4fa:	80 5f       	subi	r24, 0xF0	; 240
 4fc:	80 93 ee 00 	sts	0x00EE, r24
		
		break;
	}		

    hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
 500:	c0 91 ee 00 	lds	r28, 0x00EE
 504:	8c 2f       	mov	r24, r28
 506:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 50a:	d8 2f       	mov	r29, r24
 50c:	8c 2f       	mov	r24, r28
 50e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <index_to_col>
 512:	6d 2f       	mov	r22, r29
 514:	0e 94 ab 01 	call	0x356	; 0x356 <hd44780_set_cursor_position>
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <lcd_write_char>:


void lcd_write_char(char character){
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	c8 2f       	mov	r28, r24

    bool unsynced;
	
	// Si il s'agit d'un des 32 premier caractères ascii, on s'attend à un contrôle
	// plutôt que l'affichage d'un caractère
	if(character < ' '){
 524:	80 32       	cpi	r24, 0x20	; 32
 526:	68 f4       	brcc	.+26     	; 0x542 <lcd_write_char+0x24>
		
		switch (character){
 528:	8a 30       	cpi	r24, 0x0A	; 10
 52a:	19 f0       	breq	.+6      	; 0x532 <lcd_write_char+0x14>
 52c:	8d 30       	cpi	r24, 0x0D	; 13
 52e:	29 f5       	brne	.+74     	; 0x57a <lcd_write_char+0x5c>
 530:	04 c0       	rjmp	.+8      	; 0x53a <lcd_write_char+0x1c>
		case '\n':	// 0x0A	new line
			lcd_shift_cursor(LCD_SHIFT_DOWN);
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	0e 94 23 02 	call	0x446	; 0x446 <lcd_shift_cursor>
			break;
 538:	20 c0       	rjmp	.+64     	; 0x57a <lcd_write_char+0x5c>
		case '\r':
			lcd_shift_cursor(LCD_SHIFT_START);
 53a:	85 e0       	ldi	r24, 0x05	; 5
 53c:	0e 94 23 02 	call	0x446	; 0x446 <lcd_shift_cursor>
			break;
 540:	1c c0       	rjmp	.+56     	; 0x57a <lcd_write_char+0x5c>
		}		
	}

	else{
		
		if(clear_required_flag == TRUE){
 542:	80 91 ef 00 	lds	r24, 0x00EF
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	21 f4       	brne	.+8      	; 0x552 <lcd_write_char+0x34>
			
			hd44780_clear_display();
 54a:	0e 94 40 01 	call	0x280	; 0x280 <hd44780_clear_display>
			//hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
			clear_required_flag = FALSE;
 54e:	10 92 ef 00 	sts	0x00EF, r1
		}
		
		hd44780_write_char(character);
 552:	8c 2f       	mov	r24, r28
 554:	0e 94 b7 01 	call	0x36e	; 0x36e <hd44780_write_char>

		unsynced = shift_local_index(TRUE);
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <shift_local_index>

		if(unsynced == TRUE){
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	61 f4       	brne	.+24     	; 0x57a <lcd_write_char+0x5c>

			hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
 562:	c0 91 ee 00 	lds	r28, 0x00EE
 566:	8c 2f       	mov	r24, r28
 568:	0e 94 f5 01 	call	0x3ea	; 0x3ea <index_to_row>
 56c:	d8 2f       	mov	r29, r24
 56e:	8c 2f       	mov	r24, r28
 570:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <index_to_col>
 574:	6d 2f       	mov	r22, r29
 576:	0e 94 ab 01 	call	0x356	; 0x356 <hd44780_set_cursor_position>
		}
	}
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <lcd_write_string>:


void lcd_write_string(const char* string){
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	ec 01       	movw	r28, r24

    uint8_t index = 0;

    while(string[index] != '\0'){
 588:	88 81       	ld	r24, Y
 58a:	88 23       	and	r24, r24
 58c:	51 f0       	breq	.+20     	; 0x5a2 <lcd_write_string+0x22>
}


void lcd_write_string(const char* string){

    uint8_t index = 0;
 58e:	10 e0       	ldi	r17, 0x00	; 0

    while(string[index] != '\0'){

        lcd_write_char(string[index]);
 590:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_write_char>

        index++;
 594:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_write_string(const char* string){

    uint8_t index = 0;

    while(string[index] != '\0'){
 596:	fe 01       	movw	r30, r28
 598:	e1 0f       	add	r30, r17
 59a:	f1 1d       	adc	r31, r1
 59c:	80 81       	ld	r24, Z
 59e:	81 11       	cpse	r24, r1
 5a0:	f7 cf       	rjmp	.-18     	; 0x590 <lcd_write_string+0x10>

        lcd_write_char(string[index]);

        index++;
    }
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	08 95       	ret

000005aa <enable_UDRE_interupt>:
Static functions
******************************************************************************/

static void enable_UDRE_interupt(void){

	UCSRB = set_bit(UCSRB, UDRIE);
 5aa:	55 9a       	sbi	0x0a, 5	; 10
 5ac:	08 95       	ret

000005ae <disable_UDRE_interupt>:
}

static void disable_UDRE_interupt(void){

    UCSRB = clear_bit(UCSRB, UDRIE);
 5ae:	55 98       	cbi	0x0a, 5	; 10
 5b0:	08 95       	ret

000005b2 <__vector_14>:

/**
    \brief interupt quand le data register (UDRE) est prêt à recevoir d'autres
    données pour UART 0
*/
ISR(USART_UDRE_vect){
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31

    UDR = fifo_pop(&tx_fifo);
 5d4:	80 e7       	ldi	r24, 0x70	; 112
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 06 01 	call	0x20c	; 0x20c <fifo_pop>
 5dc:	8c b9       	out	0x0c, r24	; 12

    if(fifo_is_empty(&tx_fifo) == TRUE){
 5de:	80 e7       	ldi	r24, 0x70	; 112
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 2e 01 	call	0x25c	; 0x25c <fifo_is_empty>
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__vector_14+0x3c>

        disable_UDRE_interupt();
 5ea:	0e 94 d7 02 	call	0x5ae	; 0x5ae <disable_UDRE_interupt>
    }
}
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	bf 91       	pop	r27
 5f4:	af 91       	pop	r26
 5f6:	9f 91       	pop	r25
 5f8:	8f 91       	pop	r24
 5fa:	7f 91       	pop	r23
 5fc:	6f 91       	pop	r22
 5fe:	5f 91       	pop	r21
 600:	4f 91       	pop	r20
 602:	3f 91       	pop	r19
 604:	2f 91       	pop	r18
 606:	0f 90       	pop	r0
 608:	0f be       	out	0x3f, r0	; 63
 60a:	0f 90       	pop	r0
 60c:	1f 90       	pop	r1
 60e:	18 95       	reti

00000610 <__vector_13>:

/**
    \brief interupt quand le data register (UDR) a reçu une nouvelle donnée
    pour UART 0
*/
ISR(USART_RXC_vect){
 610:	1f 92       	push	r1
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	2f 93       	push	r18
 61c:	3f 93       	push	r19
 61e:	4f 93       	push	r20
 620:	5f 93       	push	r21
 622:	6f 93       	push	r22
 624:	7f 93       	push	r23
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	af 93       	push	r26
 62c:	bf 93       	push	r27
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31

    fifo_push(&rx_fifo, UDR);
 632:	6c b1       	in	r22, 0x0c	; 12
 634:	87 e7       	ldi	r24, 0x77	; 119
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 e7 00 	call	0x1ce	; 0x1ce <fifo_push>
}
 63c:	ff 91       	pop	r31
 63e:	ef 91       	pop	r30
 640:	bf 91       	pop	r27
 642:	af 91       	pop	r26
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	7f 91       	pop	r23
 64a:	6f 91       	pop	r22
 64c:	5f 91       	pop	r21
 64e:	4f 91       	pop	r20
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <uart_set_baudrate>:

/*** uart_set_baudrate ***/
/// \todo (iouri#1#): implémenter qqch qui empêche la corruption de la transmission.  La mise à jour de UBRR est immédiate.  Voir doc p. 196
void uart_set_baudrate(baudrate_e baudrate){

    UBRRL = (uint8_t)(baudrate_to_UBRR[baudrate] & 0xFF);
 65e:	e8 2f       	mov	r30, r24
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	e7 55       	subi	r30, 0x57	; 87
 668:	ff 4f       	sbci	r31, 0xFF	; 255
 66a:	80 81       	ld	r24, Z
 66c:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)((baudrate_to_UBRR[baudrate] >> 8) & 0xFF);
 66e:	81 81       	ldd	r24, Z+1	; 0x01
 670:	80 bd       	out	0x20, r24	; 32
 672:	08 95       	ret

00000674 <uart_init>:
******************************************************************************/
/*** initialize uart ***/
void uart_init(void){

    /* configure asynchronous operation, no parity, 1 stop bit, 8 data bits,  */
    UCSRC = (	(1 << URSEL) |	/*Doit absolument être a 1 pour écrire le registe UCSRC (gros caca d'ATmega32) */
 674:	86 e8       	ldi	r24, 0x86	; 134
 676:	80 bd       	out	0x20, r24	; 32
                (1 << UCSZ1) |  /*Character Size : 8-bit*/
                (1 << UCSZ0) |  /*Character Size : 8-bit*/
                (0 << UCPOL));  /*0 when asynchronous mode is used*/

    /* enable RxD/TxD and ints */
    UCSRB = (	(1 << RXCIE) |  /*RX Complete Interrupt Enable*/
 678:	88 e9       	ldi	r24, 0x98	; 152
 67a:	8a b9       	out	0x0a, r24	; 10
                (0 << UDRIE) |  /*Data Register Empty Interrupt Enable */
                (1 << RXEN) |   /*Receiver Enable*/
                (1 << TXEN) |   /*Transmitter Enable*/
                (0 << UCSZ2));  /*Character Size : 8-bit*/

    UCSRA = (	(0 << U2X) |    /*Double the USART Transmission Speed*/
 67c:	1b b8       	out	0x0b, r1	; 11
				(0 << MPCM));   /*Multi-processor Communication Mode*/

    /*initialisation des fifos respectifs */
    fifo_init(&rx_fifo, (uint8_t*)rx_buffer, UART_RX_BUFFER_SIZE);
 67e:	40 e4       	ldi	r20, 0x40	; 64
 680:	60 e3       	ldi	r22, 0x30	; 48
 682:	71 e0       	ldi	r23, 0x01	; 1
 684:	87 e7       	ldi	r24, 0x77	; 119
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 dd 00 	call	0x1ba	; 0x1ba <fifo_init>
    fifo_init(&tx_fifo, (uint8_t*)tx_buffer, UART_TX_BUFFER_SIZE);
 68c:	40 e4       	ldi	r20, 0x40	; 64
 68e:	60 ef       	ldi	r22, 0xF0	; 240
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	80 e7       	ldi	r24, 0x70	; 112
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 dd 00 	call	0x1ba	; 0x1ba <fifo_init>

    uart_set_baudrate(DEFAULT_BAUDRATE);
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	0e 94 2f 03 	call	0x65e	; 0x65e <uart_set_baudrate>
 6a0:	08 95       	ret

000006a2 <uart_put_string>:

}


/*** uart_put_string ***/
void uart_put_string(char* string){
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	8c 01       	movw	r16, r24
	
	uint8_t i = 0;
	
	while(string[i] != '\0'){
 6ae:	fc 01       	movw	r30, r24
 6b0:	80 81       	ld	r24, Z
 6b2:	88 23       	and	r24, r24
 6b4:	51 f1       	breq	.+84     	; 0x70a <uart_put_string+0x68>


/*** uart_put_string ***/
void uart_put_string(char* string){
	
	uint8_t i = 0;
 6b6:	f1 2c       	mov	r15, r1
	
	while(string[i] != '\0'){
		
		while(fifo_is_full(&tx_fifo)  == TRUE);
 6b8:	80 e7       	ldi	r24, 0x70	; 112
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	0e 94 31 01 	call	0x262	; 0x262 <fifo_is_full>
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	d1 f3       	breq	.-12     	; 0x6b8 <uart_put_string+0x16>
		
		//on commence par désactiver l'interuption pour éviter que celle-ci
		//se produise pendant qu'on ajoute un caractère au buffer
		disable_UDRE_interupt();
 6c4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <disable_UDRE_interupt>
		
		while((string[i] != '\0') && (fifo_is_full(&tx_fifo)  == FALSE)){
 6c8:	e8 01       	movw	r28, r16
 6ca:	cf 0d       	add	r28, r15
 6cc:	d1 1d       	adc	r29, r1
 6ce:	88 81       	ld	r24, Y
 6d0:	81 11       	cpse	r24, r1
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <uart_put_string+0x4c>
 6d4:	12 c0       	rjmp	.+36     	; 0x6fa <uart_put_string+0x58>
			
			fifo_push(&tx_fifo, string[i]);
 6d6:	68 81       	ld	r22, Y
 6d8:	80 e7       	ldi	r24, 0x70	; 112
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <fifo_push>
			
			i++;
 6e0:	f3 94       	inc	r15
		
		//on commence par désactiver l'interuption pour éviter que celle-ci
		//se produise pendant qu'on ajoute un caractère au buffer
		disable_UDRE_interupt();
		
		while((string[i] != '\0') && (fifo_is_full(&tx_fifo)  == FALSE)){
 6e2:	e8 01       	movw	r28, r16
 6e4:	cf 0d       	add	r28, r15
 6e6:	d1 1d       	adc	r29, r1
 6e8:	88 81       	ld	r24, Y
 6ea:	88 23       	and	r24, r24
 6ec:	31 f0       	breq	.+12     	; 0x6fa <uart_put_string+0x58>
 6ee:	80 e7       	ldi	r24, 0x70	; 112
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	0e 94 31 01 	call	0x262	; 0x262 <fifo_is_full>
 6f6:	88 23       	and	r24, r24
 6f8:	71 f3       	breq	.-36     	; 0x6d6 <uart_put_string+0x34>
			i++;
		}

		// On active l'interrupt après avoir incrémenté le pointeur
		// d'entré pour éviter un dead lock assez casse-tête
		enable_UDRE_interupt();
 6fa:	0e 94 d5 02 	call	0x5aa	; 0x5aa <enable_UDRE_interupt>
/*** uart_put_string ***/
void uart_put_string(char* string){
	
	uint8_t i = 0;
	
	while(string[i] != '\0'){
 6fe:	f8 01       	movw	r30, r16
 700:	ef 0d       	add	r30, r15
 702:	f1 1d       	adc	r31, r1
 704:	80 81       	ld	r24, Z
 706:	81 11       	cpse	r24, r1
 708:	d7 cf       	rjmp	.-82     	; 0x6b8 <uart_put_string+0x16>
		// On active l'interrupt après avoir incrémenté le pointeur
		// d'entré pour éviter un dead lock assez casse-tête
		enable_UDRE_interupt();

	}
}
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	08 95       	ret

00000716 <uart_clean_rx_buffer>:


/*** uart_clean_rx_buffer ***/
void uart_clean_rx_buffer(void){
	
	fifo_clean(&rx_fifo);
 716:	87 e7       	ldi	r24, 0x77	; 119
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	0e 94 27 01 	call	0x24e	; 0x24e <fifo_clean>
 71e:	08 95       	ret

00000720 <uart_is_tx_buffer_empty>:
}

/*** is_tx_buffer_empty ***/
bool uart_is_tx_buffer_empty(void){

    return fifo_is_empty(&tx_fifo);
 720:	80 e7       	ldi	r24, 0x70	; 112
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	0e 94 2e 01 	call	0x25c	; 0x25c <fifo_is_empty>
}
 728:	08 95       	ret

0000072a <uint_to_char>:

char uint_to_char(uint8_t digit){

    char caracter = '\0';

    if((digit >= 0) && (digit <= 9)){
 72a:	8a 30       	cpi	r24, 0x0A	; 10
 72c:	10 f4       	brcc	.+4      	; 0x732 <uint_to_char+0x8>

        caracter = digit + '0';
 72e:	80 5d       	subi	r24, 0xD0	; 208
 730:	08 95       	ret

/** Conversion number to text ************************************************/

char uint_to_char(uint8_t digit){

    char caracter = '\0';
 732:	80 e0       	ldi	r24, 0x00	; 0

        caracter = digit + '0';
    }

    return caracter;
}
 734:	08 95       	ret

00000736 <uint8_to_string>:

	return caracter;
}


uint8_t uint8_to_string(char* out_string, uint8_t number){
 736:	bf 92       	push	r11
 738:	cf 92       	push	r12
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	8c 01       	movw	r16, r24
 74a:	d6 2e       	mov	r13, r22

    uint8_t anti_rest;  //après avoir fixé mon écran dans le vide pendant 15 minutes à chercher
    // un nom intelligent pour cette variable j'ai décidé de passer à l'action et de lui donner
    // le premier nom qui me passerait par la tête.
    uint8_t string_index = 0;
    uint8_t power_of_ten = 100;
 74c:	0f 2e       	mov	r0, r31
 74e:	f4 e6       	ldi	r31, 0x64	; 100
 750:	ef 2e       	mov	r14, r31
 752:	f0 2d       	mov	r31, r0
uint8_t uint8_to_string(char* out_string, uint8_t number){

    uint8_t anti_rest;  //après avoir fixé mon écran dans le vide pendant 15 minutes à chercher
    // un nom intelligent pour cette variable j'ai décidé de passer à l'action et de lui donner
    // le premier nom qui me passerait par la tête.
    uint8_t string_index = 0;
 754:	f1 2c       	mov	r15, r1

        number -= anti_rest * power_of_ten;

        string_index++;

        power_of_ten /= 10;
 756:	0f 2e       	mov	r0, r31
 758:	fd ec       	ldi	r31, 0xCD	; 205
 75a:	bf 2e       	mov	r11, r31
 75c:	f0 2d       	mov	r31, r0
    uint8_t power_of_ten = 100;


    while(power_of_ten > 0){

        anti_rest = number / power_of_ten;
 75e:	8d 2d       	mov	r24, r13
 760:	6e 2d       	mov	r22, r14
 762:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__udivmodqi4>
 766:	c8 2e       	mov	r12, r24

        out_string[string_index] = uint_to_char(anti_rest);
 768:	e8 01       	movw	r28, r16
 76a:	cf 0d       	add	r28, r15
 76c:	d1 1d       	adc	r29, r1
 76e:	0e 94 95 03 	call	0x72a	; 0x72a <uint_to_char>
 772:	88 83       	st	Y, r24

        number -= anti_rest * power_of_ten;
 774:	ce 9c       	mul	r12, r14
 776:	d0 18       	sub	r13, r0
 778:	11 24       	eor	r1, r1

        string_index++;
 77a:	f3 94       	inc	r15

        power_of_ten /= 10;
 77c:	eb 9c       	mul	r14, r11
 77e:	e1 2c       	mov	r14, r1
 780:	11 24       	eor	r1, r1
 782:	e6 94       	lsr	r14
 784:	e6 94       	lsr	r14
 786:	e6 94       	lsr	r14
    // le premier nom qui me passerait par la tête.
    uint8_t string_index = 0;
    uint8_t power_of_ten = 100;


    while(power_of_ten > 0){
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	f8 12       	cpse	r15, r24
 78c:	e8 cf       	rjmp	.-48     	; 0x75e <uint8_to_string+0x28>

        power_of_ten /= 10;
    }

    /* On ferme la string */
    out_string[string_index] = '\0';
 78e:	f8 01       	movw	r30, r16
 790:	ef 0d       	add	r30, r15
 792:	f1 1d       	adc	r31, r1
 794:	10 82       	st	Z, r1
	
	return string_index;
}
 796:	8f 2d       	mov	r24, r15
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	ff 90       	pop	r15
 7a2:	ef 90       	pop	r14
 7a4:	df 90       	pop	r13
 7a6:	cf 90       	pop	r12
 7a8:	bf 90       	pop	r11
 7aa:	08 95       	ret

000007ac <initializeRemote>:

/************************************************************************/
/* Initialize the remote                                                */
/************************************************************************/
void initializeRemote(){
	lcd_init();
 7ac:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_init>
	adc_init();
 7b0:	0e 94 86 00 	call	0x10c	; 0x10c <adc_init>
	pwm_init(1,1);
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 c4 00 	call	0x188	; 0x188 <pwm_init>
	uart_init();
 7bc:	0e 94 3a 03 	call	0x674	; 0x674 <uart_init>
	uart_clean_rx_buffer();
 7c0:	0e 94 8b 03 	call	0x716	; 0x716 <uart_clean_rx_buffer>
	servo_init();
 7c4:	0e 94 9a 00 	call	0x134	; 0x134 <servo_init>
	SREG = set_bit(SREG, 7);
 7c8:	8f b7       	in	r24, 0x3f	; 63
 7ca:	80 68       	ori	r24, 0x80	; 128
 7cc:	8f bf       	out	0x3f, r24	; 63
	uart_set_baudrate(BAUDRATE_9600);
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	0e 94 2f 03 	call	0x65e	; 0x65e <uart_set_baudrate>
	DDRD = clear_bit(DDRD,PD6);
 7d4:	8e 98       	cbi	0x11, 6	; 17
	mHorizontal = 0;
 7d6:	10 92 93 01 	sts	0x0193, r1
	mVertical = 0;
 7da:	10 92 9a 01 	sts	0x019A, r1
	mLiftMemory = 0;
 7de:	10 92 9b 01 	sts	0x019B, r1
	mButtonState = 0;
 7e2:	10 92 7e 01 	sts	0x017E, r1
	mFlyMode = 0;
 7e6:	10 92 98 01 	sts	0x0198, r1
	mOutputText[16] = NULL;
 7ea:	10 92 8f 01 	sts	0x018F, r1
	mBattery = 0;
 7ee:	10 92 95 01 	sts	0x0195, r1
	loopCount = 0;
 7f2:	10 92 94 01 	sts	0x0194, r1
	brakeEngine = 0;
 7f6:	10 92 99 01 	sts	0x0199, r1
	DDRB = set_bit(DDRB,PB0);
 7fa:	b8 9a       	sbi	0x17, 0	; 23
	DDRB = set_bit(DDRB,PB1);
 7fc:	b9 9a       	sbi	0x17, 1	; 23
	DDRB = set_bit(DDRB,PB2);
 7fe:	ba 9a       	sbi	0x17, 2	; 23
	DDRB = set_bit(DDRB,PB3);
 800:	bb 9a       	sbi	0x17, 3	; 23
	DDRB = set_bit(DDRB,PB4);
 802:	bc 9a       	sbi	0x17, 4	; 23
	DDRD = clear_bit(DDRD, PD3);
 804:	8b 98       	cbi	0x11, 3	; 17
	PORTD = set_bit(PORTD, PD3);
 806:	93 9a       	sbi	0x12, 3	; 18
	mOldFlyState = read_bit(PIND, PD3);	
 808:	80 b3       	in	r24, 0x10	; 16
 80a:	83 fb       	bst	r24, 3
 80c:	88 27       	eor	r24, r24
 80e:	80 f9       	bld	r24, 0
 810:	80 93 92 01 	sts	0x0192, r24
	lcd_write_string("connecting....");	
 814:	8b eb       	ldi	r24, 0xBB	; 187
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_write_string>
	OSCCAL = OSCCAL +4;
 81c:	81 b7       	in	r24, 0x31	; 49
 81e:	8c 5f       	subi	r24, 0xFC	; 252
 820:	81 bf       	out	0x31, r24	; 49
	DDRD = set_bit(DDRD, PD2);
 822:	8a 9a       	sbi	0x11, 2	; 17
	PORTD = clear_bit(PORTD,PD2);
 824:	92 98       	cbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 826:	2f ef       	ldi	r18, 0xFF	; 255
 828:	84 e3       	ldi	r24, 0x34	; 52
 82a:	9c e0       	ldi	r25, 0x0C	; 12
 82c:	21 50       	subi	r18, 0x01	; 1
 82e:	80 40       	sbci	r24, 0x00	; 0
 830:	90 40       	sbci	r25, 0x00	; 0
 832:	e1 f7       	brne	.-8      	; 0x82c <initializeRemote+0x80>
 834:	00 c0       	rjmp	.+0      	; 0x836 <initializeRemote+0x8a>
 836:	00 00       	nop
	_delay_ms(500);
	PORTD = set_bit(PORTD,PD2);
 838:	92 9a       	sbi	0x12, 2	; 18
 83a:	2f ef       	ldi	r18, 0xFF	; 255
 83c:	89 e6       	ldi	r24, 0x69	; 105
 83e:	98 e1       	ldi	r25, 0x18	; 24
 840:	21 50       	subi	r18, 0x01	; 1
 842:	80 40       	sbci	r24, 0x00	; 0
 844:	90 40       	sbci	r25, 0x00	; 0
 846:	e1 f7       	brne	.-8      	; 0x840 <initializeRemote+0x94>
 848:	00 c0       	rjmp	.+0      	; 0x84a <initializeRemote+0x9e>
 84a:	00 00       	nop
	_delay_ms(1000);	
	uart_put_string("AT+CIPMODE=1\r\n\0");
 84c:	80 e6       	ldi	r24, 0x60	; 96
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 51 03 	call	0x6a2	; 0x6a2 <uart_put_string>
 854:	2f ef       	ldi	r18, 0xFF	; 255
 856:	88 e0       	ldi	r24, 0x08	; 8
 858:	9d e3       	ldi	r25, 0x3D	; 61
 85a:	21 50       	subi	r18, 0x01	; 1
 85c:	80 40       	sbci	r24, 0x00	; 0
 85e:	90 40       	sbci	r25, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <initializeRemote+0xae>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
 864:	00 00       	nop
	_delay_ms(2500);	
	uart_put_string("AT+CIPSTART=\"UDP\",\"192.168.4.1\",456,123\r\n\0");
 866:	80 e7       	ldi	r24, 0x70	; 112
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <uart_put_string>
 86e:	2f ef       	ldi	r18, 0xFF	; 255
 870:	81 e1       	ldi	r24, 0x11	; 17
 872:	9a e7       	ldi	r25, 0x7A	; 122
 874:	21 50       	subi	r18, 0x01	; 1
 876:	80 40       	sbci	r24, 0x00	; 0
 878:	90 40       	sbci	r25, 0x00	; 0
 87a:	e1 f7       	brne	.-8      	; 0x874 <__stack+0x15>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
 87e:	00 00       	nop
	_delay_ms(5000);	
	uart_put_string("AT+CIPSEND\r\n\0");
 880:	8b e9       	ldi	r24, 0x9B	; 155
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 51 03 	call	0x6a2	; 0x6a2 <uart_put_string>
	lcd_clear_display();
 888:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_clear_display>
	lcd_write_string("Connection initialized");
 88c:	8a ec       	ldi	r24, 0xCA	; 202
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_write_string>
 894:	2f ef       	ldi	r18, 0xFF	; 255
 896:	84 e3       	ldi	r24, 0x34	; 52
 898:	9c e0       	ldi	r25, 0x0C	; 12
 89a:	21 50       	subi	r18, 0x01	; 1
 89c:	80 40       	sbci	r24, 0x00	; 0
 89e:	90 40       	sbci	r25, 0x00	; 0
 8a0:	e1 f7       	brne	.-8      	; 0x89a <__stack+0x3b>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <__stack+0x45>
 8a4:	00 00       	nop
 8a6:	08 95       	ret

000008a8 <getMaxBatteryValue>:

/**************************************************************************/
/* Returns the maximum value between 0 and 255 that the battery can output*/
/**************************************************************************/
uint8_t getMaxBatteryValue(uint8_t maxTension){
	return  maxTension * 0.232558f / 3.3f * 255;
 8a8:	68 2f       	mov	r22, r24
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__floatsisf>
 8b4:	2f ea       	ldi	r18, 0xAF	; 175
 8b6:	33 e2       	ldi	r19, 0x23	; 35
 8b8:	4e e6       	ldi	r20, 0x6E	; 110
 8ba:	5e e3       	ldi	r21, 0x3E	; 62
 8bc:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
 8c0:	23 e3       	ldi	r18, 0x33	; 51
 8c2:	33 e3       	ldi	r19, 0x33	; 51
 8c4:	43 e5       	ldi	r20, 0x53	; 83
 8c6:	50 e4       	ldi	r21, 0x40	; 64
 8c8:	0e 94 1b 06 	call	0xc36	; 0xc36 <__divsf3>
 8cc:	20 e0       	ldi	r18, 0x00	; 0
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	4f e7       	ldi	r20, 0x7F	; 127
 8d2:	53 e4       	ldi	r21, 0x43	; 67
 8d4:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
 8d8:	0e 94 88 06 	call	0xd10	; 0xd10 <__fixunssfsi>
 8dc:	86 2f       	mov	r24, r22
}
 8de:	08 95       	ret

000008e0 <getBatteryUsagePercentage>:

/************************************************************************/
/* Returns the battery usage percentage                                 */
/************************************************************************/
uint8_t getBatteryUsagePercentage(uint8_t adcValue, uint8_t maxTension, uint8_t minTension){
 8e0:	8f 92       	push	r8
 8e2:	9f 92       	push	r9
 8e4:	af 92       	push	r10
 8e6:	bf 92       	push	r11
 8e8:	cf 92       	push	r12
 8ea:	df 92       	push	r13
 8ec:	ef 92       	push	r14
 8ee:	ff 92       	push	r15
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	f8 2e       	mov	r15, r24
 8f6:	c6 2f       	mov	r28, r22
 8f8:	d4 2f       	mov	r29, r20
	return (int)((((float)adcValue / (float)getMaxBatteryValue(maxTension) - ((float)minTension/(float)maxTension)) *100) /(100-(100*minTension/maxTension)) * 100) ;
 8fa:	86 2f       	mov	r24, r22
 8fc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <getMaxBatteryValue>
 900:	b8 2e       	mov	r11, r24
 902:	6f 2d       	mov	r22, r15
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__floatunsisf>
 90e:	6b 01       	movw	r12, r22
 910:	7c 01       	movw	r14, r24
 912:	6b 2d       	mov	r22, r11
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__floatunsisf>
 91e:	9b 01       	movw	r18, r22
 920:	ac 01       	movw	r20, r24
 922:	c7 01       	movw	r24, r14
 924:	b6 01       	movw	r22, r12
 926:	0e 94 1b 06 	call	0xc36	; 0xc36 <__divsf3>
 92a:	6b 01       	movw	r12, r22
 92c:	7c 01       	movw	r14, r24
 92e:	6d 2f       	mov	r22, r29
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 b4 06 	call	0xd68	; 0xd68 <__floatunsisf>
 93a:	4b 01       	movw	r8, r22
 93c:	5c 01       	movw	r10, r24
 93e:	6c 2f       	mov	r22, r28
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 b4 06 	call	0xd68	; 0xd68 <__floatunsisf>
 94a:	9b 01       	movw	r18, r22
 94c:	ac 01       	movw	r20, r24
 94e:	c5 01       	movw	r24, r10
 950:	b4 01       	movw	r22, r8
 952:	0e 94 1b 06 	call	0xc36	; 0xc36 <__divsf3>
 956:	9b 01       	movw	r18, r22
 958:	ac 01       	movw	r20, r24
 95a:	c7 01       	movw	r24, r14
 95c:	b6 01       	movw	r22, r12
 95e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__subsf3>
 962:	20 e0       	ldi	r18, 0x00	; 0
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	48 ec       	ldi	r20, 0xC8	; 200
 968:	52 e4       	ldi	r21, 0x42	; 66
 96a:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
 96e:	6b 01       	movw	r12, r22
 970:	7c 01       	movw	r14, r24
 972:	24 e6       	ldi	r18, 0x64	; 100
 974:	d2 9f       	mul	r29, r18
 976:	c0 01       	movw	r24, r0
 978:	11 24       	eor	r1, r1
 97a:	6c 2f       	mov	r22, r28
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__divmodhi4>
 982:	84 e6       	ldi	r24, 0x64	; 100
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	9c 01       	movw	r18, r24
 988:	26 1b       	sub	r18, r22
 98a:	37 0b       	sbc	r19, r23
 98c:	b9 01       	movw	r22, r18
 98e:	88 27       	eor	r24, r24
 990:	77 fd       	sbrc	r23, 7
 992:	80 95       	com	r24
 994:	98 2f       	mov	r25, r24
 996:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__floatsisf>
 99a:	9b 01       	movw	r18, r22
 99c:	ac 01       	movw	r20, r24
 99e:	c7 01       	movw	r24, r14
 9a0:	b6 01       	movw	r22, r12
 9a2:	0e 94 1b 06 	call	0xc36	; 0xc36 <__divsf3>
 9a6:	20 e0       	ldi	r18, 0x00	; 0
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	48 ec       	ldi	r20, 0xC8	; 200
 9ac:	52 e4       	ldi	r21, 0x42	; 66
 9ae:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
 9b2:	0e 94 83 06 	call	0xd06	; 0xd06 <__fixsfsi>
}
 9b6:	86 2f       	mov	r24, r22
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	ff 90       	pop	r15
 9be:	ef 90       	pop	r14
 9c0:	df 90       	pop	r13
 9c2:	cf 90       	pop	r12
 9c4:	bf 90       	pop	r11
 9c6:	af 90       	pop	r10
 9c8:	9f 90       	pop	r9
 9ca:	8f 90       	pop	r8
 9cc:	08 95       	ret

000009ce <main>:
void initializeRemote();

int main(void)
{
	/* ================ Initialize all the values and microcontroller ports on the ATMEGA32 ================ */
	initializeRemote();
 9ce:	0e 94 d6 03 	call	0x7ac	; 0x7ac <initializeRemote>
		}
		
		/* ============== Send data to the airboat ============ */
		if(uart_is_tx_buffer_empty())
		{
			mOutputText[0] = '[';
 9d2:	cf e7       	ldi	r28, 0x7F	; 127
 9d4:	d1 e0       	ldi	r29, 0x01	; 1
 9d6:	0f 2e       	mov	r0, r31
 9d8:	fb e5       	ldi	r31, 0x5B	; 91
 9da:	af 2e       	mov	r10, r31
 9dc:	f0 2d       	mov	r31, r0
				}
				else{
					mOutputText[7] = 'S';
				}
			}			
			mOutputText[8] = ']';
 9de:	0f 2e       	mov	r0, r31
 9e0:	f7 e8       	ldi	r31, 0x87	; 135
 9e2:	cf 2e       	mov	r12, r31
 9e4:	f1 e0       	ldi	r31, 0x01	; 1
 9e6:	df 2e       	mov	r13, r31
 9e8:	f0 2d       	mov	r31, r0
 9ea:	0f 2e       	mov	r0, r31
 9ec:	fd e5       	ldi	r31, 0x5D	; 93
 9ee:	bf 2e       	mov	r11, r31
 9f0:	f0 2d       	mov	r31, r0
			mOutputText[9] = '\0';			
 9f2:	0f 2e       	mov	r0, r31
 9f4:	f8 e8       	ldi	r31, 0x88	; 136
 9f6:	ef 2e       	mov	r14, r31
 9f8:	f1 e0       	ldi	r31, 0x01	; 1
 9fa:	ff 2e       	mov	r15, r31
 9fc:	f0 2d       	mov	r31, r0
			}else{
				if(!mFlyMode){
					mOutputText[7] = 'L';
				}
				else{
					mOutputText[7] = 'S';
 9fe:	06 e8       	ldi	r16, 0x86	; 134
 a00:	11 e0       	ldi	r17, 0x01	; 1
 a02:	0f 2e       	mov	r0, r31
 a04:	f3 e5       	ldi	r31, 0x53	; 83
 a06:	7f 2e       	mov	r7, r31
 a08:	f0 2d       	mov	r31, r0
			uint8_to_string(mOutputText + 4, mVertical);
			if(brakeEngine){
				mOutputText[7] = 'B';
			}else{
				if(!mFlyMode){
					mOutputText[7] = 'L';
 a0a:	0f 2e       	mov	r0, r31
 a0c:	fc e4       	ldi	r31, 0x4C	; 76
 a0e:	8f 2e       	mov	r8, r31
 a10:	f0 2d       	mov	r31, r0
		{
			mOutputText[0] = '[';
			uint8_to_string(mOutputText + 1,mHorizontal);
			uint8_to_string(mOutputText + 4, mVertical);
			if(brakeEngine){
				mOutputText[7] = 'B';
 a12:	0f 2e       	mov	r0, r31
 a14:	f2 e4       	ldi	r31, 0x42	; 66
 a16:	9f 2e       	mov	r9, r31
 a18:	f0 2d       	mov	r31, r0
	initializeRemote();

	/* ================ Microcontroller loop ================ */	
	while(1){			
		// Adjust the horizontal value with an offset of 2 (can be removed, calibration)
		if(adc_read(PA1) == 126){
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	0e 94 90 00 	call	0x120	; 0x120 <adc_read>
 a20:	8e 37       	cpi	r24, 0x7E	; 126
 a22:	39 f4       	brne	.+14     	; 0xa32 <main+0x64>
			mHorizontal = adc_read(PA1)  - 2;
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	0e 94 90 00 	call	0x120	; 0x120 <adc_read>
 a2a:	82 50       	subi	r24, 0x02	; 2
 a2c:	80 93 93 01 	sts	0x0193, r24
 a30:	05 c0       	rjmp	.+10     	; 0xa3c <main+0x6e>
		}else{
			mHorizontal = adc_read(PA1);
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	0e 94 90 00 	call	0x120	; 0x120 <adc_read>
 a38:	80 93 93 01 	sts	0x0193, r24
		}
		mVertical = adc_read(PA2);
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	0e 94 90 00 	call	0x120	; 0x120 <adc_read>
		mVertical = (255 - mVertical);
 a42:	80 95       	com	r24
		if(mVertical == 0){
 a44:	19 f0       	breq	.+6      	; 0xa4c <main+0x7e>
			mHorizontal = adc_read(PA1)  - 2;
		}else{
			mHorizontal = adc_read(PA1);
		}
		mVertical = adc_read(PA2);
		mVertical = (255 - mVertical);
 a46:	80 93 9a 01 	sts	0x019A, r24
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <main+0x84>
		if(mVertical == 0){
			mVertical++;
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	80 93 9a 01 	sts	0x019A, r24
		}
		// Read the battery tension
		mBattery = adc_read(PA3);
 a52:	83 e0       	ldi	r24, 0x03	; 3
 a54:	0e 94 90 00 	call	0x120	; 0x120 <adc_read>
 a58:	80 93 95 01 	sts	0x0195, r24
		if(mFlyMode){
 a5c:	90 91 98 01 	lds	r25, 0x0198
 a60:	99 23       	and	r25, r25
 a62:	21 f0       	breq	.+8      	; 0xa6c <main+0x9e>
			mLiftMemory = mVertical;
 a64:	80 91 9a 01 	lds	r24, 0x019A
 a68:	80 93 9b 01 	sts	0x019B, r24
		}
		// Read the joystick button state to change the fly mode
		if(loopCount == 1 || loopCount == 50){
 a6c:	80 91 94 01 	lds	r24, 0x0194
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	11 f0       	breq	.+4      	; 0xa78 <main+0xaa>
 a74:	82 33       	cpi	r24, 0x32	; 50
 a76:	b9 f4       	brne	.+46     	; 0xaa6 <main+0xd8>
			mButtonState = read_bit(PIND, PD3);
 a78:	80 b3       	in	r24, 0x10	; 16
 a7a:	83 fb       	bst	r24, 3
 a7c:	88 27       	eor	r24, r24
 a7e:	80 f9       	bld	r24, 0
 a80:	80 93 7e 01 	sts	0x017E, r24
			if(mButtonState != mOldFlyState && mButtonState == 0)
 a84:	20 91 92 01 	lds	r18, 0x0192
 a88:	82 17       	cp	r24, r18
 a8a:	51 f0       	breq	.+20     	; 0xaa0 <main+0xd2>
 a8c:	81 11       	cpse	r24, r1
 a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <main+0xd2>
			{
				mFlyMode = !mFlyMode;
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	91 11       	cpse	r25, r1
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	80 93 98 01 	sts	0x0198, r24
				mOldFlyState = 0;
 a9a:	10 92 92 01 	sts	0x0192, r1
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <main+0xd8>
			}
			else{
				mOldFlyState = 1;
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	80 93 92 01 	sts	0x0192, r24
			}
		}
		
		/* ============== Send data to the airboat ============ */
		if(uart_is_tx_buffer_empty())
 aa6:	0e 94 90 03 	call	0x720	; 0x720 <uart_is_tx_buffer_empty>
 aaa:	88 23       	and	r24, r24
 aac:	09 f4       	brne	.+2      	; 0xab0 <main+0xe2>
 aae:	b5 cf       	rjmp	.-150    	; 0xa1a <main+0x4c>
		{
			mOutputText[0] = '[';
 ab0:	a8 82       	st	Y, r10
			uint8_to_string(mOutputText + 1,mHorizontal);
 ab2:	60 91 93 01 	lds	r22, 0x0193
 ab6:	80 e8       	ldi	r24, 0x80	; 128
 ab8:	91 e0       	ldi	r25, 0x01	; 1
 aba:	0e 94 9b 03 	call	0x736	; 0x736 <uint8_to_string>
			uint8_to_string(mOutputText + 4, mVertical);
 abe:	60 91 9a 01 	lds	r22, 0x019A
 ac2:	83 e8       	ldi	r24, 0x83	; 131
 ac4:	91 e0       	ldi	r25, 0x01	; 1
 ac6:	0e 94 9b 03 	call	0x736	; 0x736 <uint8_to_string>
			if(brakeEngine){
 aca:	80 91 99 01 	lds	r24, 0x0199
 ace:	88 23       	and	r24, r24
 ad0:	19 f0       	breq	.+6      	; 0xad8 <main+0x10a>
				mOutputText[7] = 'B';
 ad2:	f8 01       	movw	r30, r16
 ad4:	90 82       	st	Z, r9
 ad6:	09 c0       	rjmp	.+18     	; 0xaea <main+0x11c>
			}else{
				if(!mFlyMode){
 ad8:	80 91 98 01 	lds	r24, 0x0198
 adc:	81 11       	cpse	r24, r1
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <main+0x118>
					mOutputText[7] = 'L';
 ae0:	f8 01       	movw	r30, r16
 ae2:	80 82       	st	Z, r8
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <main+0x11c>
				}
				else{
					mOutputText[7] = 'S';
 ae6:	f8 01       	movw	r30, r16
 ae8:	70 82       	st	Z, r7
				}
			}			
			mOutputText[8] = ']';
 aea:	f6 01       	movw	r30, r12
 aec:	b0 82       	st	Z, r11
			mOutputText[9] = '\0';			
 aee:	f7 01       	movw	r30, r14
 af0:	10 82       	st	Z, r1
			uint8_to_string(output,getBatteryUsagePercentage(mBattery,9,6));
 af2:	46 e0       	ldi	r20, 0x06	; 6
 af4:	69 e0       	ldi	r22, 0x09	; 9
 af6:	80 91 95 01 	lds	r24, 0x0195
 afa:	0e 94 70 04 	call	0x8e0	; 0x8e0 <getBatteryUsagePercentage>
 afe:	68 2f       	mov	r22, r24
 b00:	8f e8       	ldi	r24, 0x8F	; 143
 b02:	91 e0       	ldi	r25, 0x01	; 1
 b04:	0e 94 9b 03 	call	0x736	; 0x736 <uint8_to_string>
			loopCount++;
 b08:	80 91 94 01 	lds	r24, 0x0194
 b0c:	8f 5f       	subi	r24, 0xFF	; 255
 b0e:	80 93 94 01 	sts	0x0194, r24
			if(loopCount == 1){
 b12:	81 30       	cpi	r24, 0x01	; 1
 b14:	19 f5       	brne	.+70     	; 0xb5c <main+0x18e>
				lcd_clear_display();
 b16:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_clear_display>
				lcd_write_string(mOutputText);
 b1a:	ce 01       	movw	r24, r28
 b1c:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_write_string>
				lcd_write_string(" M:");
 b20:	81 ee       	ldi	r24, 0xE1	; 225
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_write_string>
				lcd_write_string(output);
 b28:	8f e8       	ldi	r24, 0x8F	; 143
 b2a:	91 e0       	ldi	r25, 0x01	; 1
 b2c:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_write_string>
				lcd_write_string("%");
 b30:	85 ee       	ldi	r24, 0xE5	; 229
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_write_string>
				if(adc_read(PA0) == 255){
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	0e 94 90 00 	call	0x120	; 0x120 <adc_read>
 b3e:	8f 3f       	cpi	r24, 0xFF	; 255
 b40:	41 f4       	brne	.+16     	; 0xb52 <main+0x184>
					lcd_write_string("BRAKE");
 b42:	87 ee       	ldi	r24, 0xE7	; 231
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 94 c0 02 	call	0x580	; 0x580 <lcd_write_string>
					brakeEngine = 1;
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	80 93 99 01 	sts	0x0199, r24
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <main+0x188>
				}else{
					brakeEngine = 0;
 b52:	10 92 99 01 	sts	0x0199, r1
				}
				uart_put_string(mOutputText);				
 b56:	ce 01       	movw	r24, r28
 b58:	0e 94 51 03 	call	0x6a2	; 0x6a2 <uart_put_string>
			}
			
			if(loopCount == 100){
 b5c:	80 91 94 01 	lds	r24, 0x0194
 b60:	84 36       	cpi	r24, 0x64	; 100
 b62:	09 f0       	breq	.+2      	; 0xb66 <main+0x198>
 b64:	5a cf       	rjmp	.-332    	; 0xa1a <main+0x4c>
				loopCount = 0;
 b66:	10 92 94 01 	sts	0x0194, r1
 b6a:	57 cf       	rjmp	.-338    	; 0xa1a <main+0x4c>

00000b6c <__subsf3>:
 b6c:	50 58       	subi	r21, 0x80	; 128

00000b6e <__addsf3>:
 b6e:	bb 27       	eor	r27, r27
 b70:	aa 27       	eor	r26, r26
 b72:	0e d0       	rcall	.+28     	; 0xb90 <__addsf3x>
 b74:	4d c1       	rjmp	.+666    	; 0xe10 <__fp_round>
 b76:	3e d1       	rcall	.+636    	; 0xdf4 <__fp_pscA>
 b78:	30 f0       	brcs	.+12     	; 0xb86 <__addsf3+0x18>
 b7a:	43 d1       	rcall	.+646    	; 0xe02 <__fp_pscB>
 b7c:	20 f0       	brcs	.+8      	; 0xb86 <__addsf3+0x18>
 b7e:	31 f4       	brne	.+12     	; 0xb8c <__addsf3+0x1e>
 b80:	9f 3f       	cpi	r25, 0xFF	; 255
 b82:	11 f4       	brne	.+4      	; 0xb88 <__addsf3+0x1a>
 b84:	1e f4       	brtc	.+6      	; 0xb8c <__addsf3+0x1e>
 b86:	33 c1       	rjmp	.+614    	; 0xdee <__fp_nan>
 b88:	0e f4       	brtc	.+2      	; 0xb8c <__addsf3+0x1e>
 b8a:	e0 95       	com	r30
 b8c:	e7 fb       	bst	r30, 7
 b8e:	29 c1       	rjmp	.+594    	; 0xde2 <__fp_inf>

00000b90 <__addsf3x>:
 b90:	e9 2f       	mov	r30, r25
 b92:	4f d1       	rcall	.+670    	; 0xe32 <__fp_split3>
 b94:	80 f3       	brcs	.-32     	; 0xb76 <__addsf3+0x8>
 b96:	ba 17       	cp	r27, r26
 b98:	62 07       	cpc	r22, r18
 b9a:	73 07       	cpc	r23, r19
 b9c:	84 07       	cpc	r24, r20
 b9e:	95 07       	cpc	r25, r21
 ba0:	18 f0       	brcs	.+6      	; 0xba8 <__addsf3x+0x18>
 ba2:	71 f4       	brne	.+28     	; 0xbc0 <__addsf3x+0x30>
 ba4:	9e f5       	brtc	.+102    	; 0xc0c <__addsf3x+0x7c>
 ba6:	67 c1       	rjmp	.+718    	; 0xe76 <__fp_zero>
 ba8:	0e f4       	brtc	.+2      	; 0xbac <__addsf3x+0x1c>
 baa:	e0 95       	com	r30
 bac:	0b 2e       	mov	r0, r27
 bae:	ba 2f       	mov	r27, r26
 bb0:	a0 2d       	mov	r26, r0
 bb2:	0b 01       	movw	r0, r22
 bb4:	b9 01       	movw	r22, r18
 bb6:	90 01       	movw	r18, r0
 bb8:	0c 01       	movw	r0, r24
 bba:	ca 01       	movw	r24, r20
 bbc:	a0 01       	movw	r20, r0
 bbe:	11 24       	eor	r1, r1
 bc0:	ff 27       	eor	r31, r31
 bc2:	59 1b       	sub	r21, r25
 bc4:	99 f0       	breq	.+38     	; 0xbec <__addsf3x+0x5c>
 bc6:	59 3f       	cpi	r21, 0xF9	; 249
 bc8:	50 f4       	brcc	.+20     	; 0xbde <__addsf3x+0x4e>
 bca:	50 3e       	cpi	r21, 0xE0	; 224
 bcc:	68 f1       	brcs	.+90     	; 0xc28 <__addsf3x+0x98>
 bce:	1a 16       	cp	r1, r26
 bd0:	f0 40       	sbci	r31, 0x00	; 0
 bd2:	a2 2f       	mov	r26, r18
 bd4:	23 2f       	mov	r18, r19
 bd6:	34 2f       	mov	r19, r20
 bd8:	44 27       	eor	r20, r20
 bda:	58 5f       	subi	r21, 0xF8	; 248
 bdc:	f3 cf       	rjmp	.-26     	; 0xbc4 <__addsf3x+0x34>
 bde:	46 95       	lsr	r20
 be0:	37 95       	ror	r19
 be2:	27 95       	ror	r18
 be4:	a7 95       	ror	r26
 be6:	f0 40       	sbci	r31, 0x00	; 0
 be8:	53 95       	inc	r21
 bea:	c9 f7       	brne	.-14     	; 0xbde <__addsf3x+0x4e>
 bec:	7e f4       	brtc	.+30     	; 0xc0c <__addsf3x+0x7c>
 bee:	1f 16       	cp	r1, r31
 bf0:	ba 0b       	sbc	r27, r26
 bf2:	62 0b       	sbc	r22, r18
 bf4:	73 0b       	sbc	r23, r19
 bf6:	84 0b       	sbc	r24, r20
 bf8:	ba f0       	brmi	.+46     	; 0xc28 <__addsf3x+0x98>
 bfa:	91 50       	subi	r25, 0x01	; 1
 bfc:	a1 f0       	breq	.+40     	; 0xc26 <__addsf3x+0x96>
 bfe:	ff 0f       	add	r31, r31
 c00:	bb 1f       	adc	r27, r27
 c02:	66 1f       	adc	r22, r22
 c04:	77 1f       	adc	r23, r23
 c06:	88 1f       	adc	r24, r24
 c08:	c2 f7       	brpl	.-16     	; 0xbfa <__addsf3x+0x6a>
 c0a:	0e c0       	rjmp	.+28     	; 0xc28 <__addsf3x+0x98>
 c0c:	ba 0f       	add	r27, r26
 c0e:	62 1f       	adc	r22, r18
 c10:	73 1f       	adc	r23, r19
 c12:	84 1f       	adc	r24, r20
 c14:	48 f4       	brcc	.+18     	; 0xc28 <__addsf3x+0x98>
 c16:	87 95       	ror	r24
 c18:	77 95       	ror	r23
 c1a:	67 95       	ror	r22
 c1c:	b7 95       	ror	r27
 c1e:	f7 95       	ror	r31
 c20:	9e 3f       	cpi	r25, 0xFE	; 254
 c22:	08 f0       	brcs	.+2      	; 0xc26 <__addsf3x+0x96>
 c24:	b3 cf       	rjmp	.-154    	; 0xb8c <__addsf3+0x1e>
 c26:	93 95       	inc	r25
 c28:	88 0f       	add	r24, r24
 c2a:	08 f0       	brcs	.+2      	; 0xc2e <__addsf3x+0x9e>
 c2c:	99 27       	eor	r25, r25
 c2e:	ee 0f       	add	r30, r30
 c30:	97 95       	ror	r25
 c32:	87 95       	ror	r24
 c34:	08 95       	ret

00000c36 <__divsf3>:
 c36:	0c d0       	rcall	.+24     	; 0xc50 <__divsf3x>
 c38:	eb c0       	rjmp	.+470    	; 0xe10 <__fp_round>
 c3a:	e3 d0       	rcall	.+454    	; 0xe02 <__fp_pscB>
 c3c:	40 f0       	brcs	.+16     	; 0xc4e <__divsf3+0x18>
 c3e:	da d0       	rcall	.+436    	; 0xdf4 <__fp_pscA>
 c40:	30 f0       	brcs	.+12     	; 0xc4e <__divsf3+0x18>
 c42:	21 f4       	brne	.+8      	; 0xc4c <__divsf3+0x16>
 c44:	5f 3f       	cpi	r21, 0xFF	; 255
 c46:	19 f0       	breq	.+6      	; 0xc4e <__divsf3+0x18>
 c48:	cc c0       	rjmp	.+408    	; 0xde2 <__fp_inf>
 c4a:	51 11       	cpse	r21, r1
 c4c:	15 c1       	rjmp	.+554    	; 0xe78 <__fp_szero>
 c4e:	cf c0       	rjmp	.+414    	; 0xdee <__fp_nan>

00000c50 <__divsf3x>:
 c50:	f0 d0       	rcall	.+480    	; 0xe32 <__fp_split3>
 c52:	98 f3       	brcs	.-26     	; 0xc3a <__divsf3+0x4>

00000c54 <__divsf3_pse>:
 c54:	99 23       	and	r25, r25
 c56:	c9 f3       	breq	.-14     	; 0xc4a <__divsf3+0x14>
 c58:	55 23       	and	r21, r21
 c5a:	b1 f3       	breq	.-20     	; 0xc48 <__divsf3+0x12>
 c5c:	95 1b       	sub	r25, r21
 c5e:	55 0b       	sbc	r21, r21
 c60:	bb 27       	eor	r27, r27
 c62:	aa 27       	eor	r26, r26
 c64:	62 17       	cp	r22, r18
 c66:	73 07       	cpc	r23, r19
 c68:	84 07       	cpc	r24, r20
 c6a:	38 f0       	brcs	.+14     	; 0xc7a <__divsf3_pse+0x26>
 c6c:	9f 5f       	subi	r25, 0xFF	; 255
 c6e:	5f 4f       	sbci	r21, 0xFF	; 255
 c70:	22 0f       	add	r18, r18
 c72:	33 1f       	adc	r19, r19
 c74:	44 1f       	adc	r20, r20
 c76:	aa 1f       	adc	r26, r26
 c78:	a9 f3       	breq	.-22     	; 0xc64 <__divsf3_pse+0x10>
 c7a:	33 d0       	rcall	.+102    	; 0xce2 <__divsf3_pse+0x8e>
 c7c:	0e 2e       	mov	r0, r30
 c7e:	3a f0       	brmi	.+14     	; 0xc8e <__divsf3_pse+0x3a>
 c80:	e0 e8       	ldi	r30, 0x80	; 128
 c82:	30 d0       	rcall	.+96     	; 0xce4 <__divsf3_pse+0x90>
 c84:	91 50       	subi	r25, 0x01	; 1
 c86:	50 40       	sbci	r21, 0x00	; 0
 c88:	e6 95       	lsr	r30
 c8a:	00 1c       	adc	r0, r0
 c8c:	ca f7       	brpl	.-14     	; 0xc80 <__divsf3_pse+0x2c>
 c8e:	29 d0       	rcall	.+82     	; 0xce2 <__divsf3_pse+0x8e>
 c90:	fe 2f       	mov	r31, r30
 c92:	27 d0       	rcall	.+78     	; 0xce2 <__divsf3_pse+0x8e>
 c94:	66 0f       	add	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	bb 1f       	adc	r27, r27
 c9c:	26 17       	cp	r18, r22
 c9e:	37 07       	cpc	r19, r23
 ca0:	48 07       	cpc	r20, r24
 ca2:	ab 07       	cpc	r26, r27
 ca4:	b0 e8       	ldi	r27, 0x80	; 128
 ca6:	09 f0       	breq	.+2      	; 0xcaa <__divsf3_pse+0x56>
 ca8:	bb 0b       	sbc	r27, r27
 caa:	80 2d       	mov	r24, r0
 cac:	bf 01       	movw	r22, r30
 cae:	ff 27       	eor	r31, r31
 cb0:	93 58       	subi	r25, 0x83	; 131
 cb2:	5f 4f       	sbci	r21, 0xFF	; 255
 cb4:	2a f0       	brmi	.+10     	; 0xcc0 <__divsf3_pse+0x6c>
 cb6:	9e 3f       	cpi	r25, 0xFE	; 254
 cb8:	51 05       	cpc	r21, r1
 cba:	68 f0       	brcs	.+26     	; 0xcd6 <__divsf3_pse+0x82>
 cbc:	92 c0       	rjmp	.+292    	; 0xde2 <__fp_inf>
 cbe:	dc c0       	rjmp	.+440    	; 0xe78 <__fp_szero>
 cc0:	5f 3f       	cpi	r21, 0xFF	; 255
 cc2:	ec f3       	brlt	.-6      	; 0xcbe <__divsf3_pse+0x6a>
 cc4:	98 3e       	cpi	r25, 0xE8	; 232
 cc6:	dc f3       	brlt	.-10     	; 0xcbe <__divsf3_pse+0x6a>
 cc8:	86 95       	lsr	r24
 cca:	77 95       	ror	r23
 ccc:	67 95       	ror	r22
 cce:	b7 95       	ror	r27
 cd0:	f7 95       	ror	r31
 cd2:	9f 5f       	subi	r25, 0xFF	; 255
 cd4:	c9 f7       	brne	.-14     	; 0xcc8 <__divsf3_pse+0x74>
 cd6:	88 0f       	add	r24, r24
 cd8:	91 1d       	adc	r25, r1
 cda:	96 95       	lsr	r25
 cdc:	87 95       	ror	r24
 cde:	97 f9       	bld	r25, 7
 ce0:	08 95       	ret
 ce2:	e1 e0       	ldi	r30, 0x01	; 1
 ce4:	66 0f       	add	r22, r22
 ce6:	77 1f       	adc	r23, r23
 ce8:	88 1f       	adc	r24, r24
 cea:	bb 1f       	adc	r27, r27
 cec:	62 17       	cp	r22, r18
 cee:	73 07       	cpc	r23, r19
 cf0:	84 07       	cpc	r24, r20
 cf2:	ba 07       	cpc	r27, r26
 cf4:	20 f0       	brcs	.+8      	; 0xcfe <__divsf3_pse+0xaa>
 cf6:	62 1b       	sub	r22, r18
 cf8:	73 0b       	sbc	r23, r19
 cfa:	84 0b       	sbc	r24, r20
 cfc:	ba 0b       	sbc	r27, r26
 cfe:	ee 1f       	adc	r30, r30
 d00:	88 f7       	brcc	.-30     	; 0xce4 <__divsf3_pse+0x90>
 d02:	e0 95       	com	r30
 d04:	08 95       	ret

00000d06 <__fixsfsi>:
 d06:	04 d0       	rcall	.+8      	; 0xd10 <__fixunssfsi>
 d08:	68 94       	set
 d0a:	b1 11       	cpse	r27, r1
 d0c:	b5 c0       	rjmp	.+362    	; 0xe78 <__fp_szero>
 d0e:	08 95       	ret

00000d10 <__fixunssfsi>:
 d10:	98 d0       	rcall	.+304    	; 0xe42 <__fp_splitA>
 d12:	88 f0       	brcs	.+34     	; 0xd36 <__fixunssfsi+0x26>
 d14:	9f 57       	subi	r25, 0x7F	; 127
 d16:	90 f0       	brcs	.+36     	; 0xd3c <__fixunssfsi+0x2c>
 d18:	b9 2f       	mov	r27, r25
 d1a:	99 27       	eor	r25, r25
 d1c:	b7 51       	subi	r27, 0x17	; 23
 d1e:	a0 f0       	brcs	.+40     	; 0xd48 <__fixunssfsi+0x38>
 d20:	d1 f0       	breq	.+52     	; 0xd56 <__fixunssfsi+0x46>
 d22:	66 0f       	add	r22, r22
 d24:	77 1f       	adc	r23, r23
 d26:	88 1f       	adc	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	1a f0       	brmi	.+6      	; 0xd32 <__fixunssfsi+0x22>
 d2c:	ba 95       	dec	r27
 d2e:	c9 f7       	brne	.-14     	; 0xd22 <__fixunssfsi+0x12>
 d30:	12 c0       	rjmp	.+36     	; 0xd56 <__fixunssfsi+0x46>
 d32:	b1 30       	cpi	r27, 0x01	; 1
 d34:	81 f0       	breq	.+32     	; 0xd56 <__fixunssfsi+0x46>
 d36:	9f d0       	rcall	.+318    	; 0xe76 <__fp_zero>
 d38:	b1 e0       	ldi	r27, 0x01	; 1
 d3a:	08 95       	ret
 d3c:	9c c0       	rjmp	.+312    	; 0xe76 <__fp_zero>
 d3e:	67 2f       	mov	r22, r23
 d40:	78 2f       	mov	r23, r24
 d42:	88 27       	eor	r24, r24
 d44:	b8 5f       	subi	r27, 0xF8	; 248
 d46:	39 f0       	breq	.+14     	; 0xd56 <__fixunssfsi+0x46>
 d48:	b9 3f       	cpi	r27, 0xF9	; 249
 d4a:	cc f3       	brlt	.-14     	; 0xd3e <__fixunssfsi+0x2e>
 d4c:	86 95       	lsr	r24
 d4e:	77 95       	ror	r23
 d50:	67 95       	ror	r22
 d52:	b3 95       	inc	r27
 d54:	d9 f7       	brne	.-10     	; 0xd4c <__fixunssfsi+0x3c>
 d56:	3e f4       	brtc	.+14     	; 0xd66 <__fixunssfsi+0x56>
 d58:	90 95       	com	r25
 d5a:	80 95       	com	r24
 d5c:	70 95       	com	r23
 d5e:	61 95       	neg	r22
 d60:	7f 4f       	sbci	r23, 0xFF	; 255
 d62:	8f 4f       	sbci	r24, 0xFF	; 255
 d64:	9f 4f       	sbci	r25, 0xFF	; 255
 d66:	08 95       	ret

00000d68 <__floatunsisf>:
 d68:	e8 94       	clt
 d6a:	09 c0       	rjmp	.+18     	; 0xd7e <__floatsisf+0x12>

00000d6c <__floatsisf>:
 d6c:	97 fb       	bst	r25, 7
 d6e:	3e f4       	brtc	.+14     	; 0xd7e <__floatsisf+0x12>
 d70:	90 95       	com	r25
 d72:	80 95       	com	r24
 d74:	70 95       	com	r23
 d76:	61 95       	neg	r22
 d78:	7f 4f       	sbci	r23, 0xFF	; 255
 d7a:	8f 4f       	sbci	r24, 0xFF	; 255
 d7c:	9f 4f       	sbci	r25, 0xFF	; 255
 d7e:	99 23       	and	r25, r25
 d80:	a9 f0       	breq	.+42     	; 0xdac <__floatsisf+0x40>
 d82:	f9 2f       	mov	r31, r25
 d84:	96 e9       	ldi	r25, 0x96	; 150
 d86:	bb 27       	eor	r27, r27
 d88:	93 95       	inc	r25
 d8a:	f6 95       	lsr	r31
 d8c:	87 95       	ror	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	b7 95       	ror	r27
 d94:	f1 11       	cpse	r31, r1
 d96:	f8 cf       	rjmp	.-16     	; 0xd88 <__floatsisf+0x1c>
 d98:	fa f4       	brpl	.+62     	; 0xdd8 <__floatsisf+0x6c>
 d9a:	bb 0f       	add	r27, r27
 d9c:	11 f4       	brne	.+4      	; 0xda2 <__floatsisf+0x36>
 d9e:	60 ff       	sbrs	r22, 0
 da0:	1b c0       	rjmp	.+54     	; 0xdd8 <__floatsisf+0x6c>
 da2:	6f 5f       	subi	r22, 0xFF	; 255
 da4:	7f 4f       	sbci	r23, 0xFF	; 255
 da6:	8f 4f       	sbci	r24, 0xFF	; 255
 da8:	9f 4f       	sbci	r25, 0xFF	; 255
 daa:	16 c0       	rjmp	.+44     	; 0xdd8 <__floatsisf+0x6c>
 dac:	88 23       	and	r24, r24
 dae:	11 f0       	breq	.+4      	; 0xdb4 <__floatsisf+0x48>
 db0:	96 e9       	ldi	r25, 0x96	; 150
 db2:	11 c0       	rjmp	.+34     	; 0xdd6 <__floatsisf+0x6a>
 db4:	77 23       	and	r23, r23
 db6:	21 f0       	breq	.+8      	; 0xdc0 <__floatsisf+0x54>
 db8:	9e e8       	ldi	r25, 0x8E	; 142
 dba:	87 2f       	mov	r24, r23
 dbc:	76 2f       	mov	r23, r22
 dbe:	05 c0       	rjmp	.+10     	; 0xdca <__floatsisf+0x5e>
 dc0:	66 23       	and	r22, r22
 dc2:	71 f0       	breq	.+28     	; 0xde0 <__floatsisf+0x74>
 dc4:	96 e8       	ldi	r25, 0x86	; 134
 dc6:	86 2f       	mov	r24, r22
 dc8:	70 e0       	ldi	r23, 0x00	; 0
 dca:	60 e0       	ldi	r22, 0x00	; 0
 dcc:	2a f0       	brmi	.+10     	; 0xdd8 <__floatsisf+0x6c>
 dce:	9a 95       	dec	r25
 dd0:	66 0f       	add	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	da f7       	brpl	.-10     	; 0xdce <__floatsisf+0x62>
 dd8:	88 0f       	add	r24, r24
 dda:	96 95       	lsr	r25
 ddc:	87 95       	ror	r24
 dde:	97 f9       	bld	r25, 7
 de0:	08 95       	ret

00000de2 <__fp_inf>:
 de2:	97 f9       	bld	r25, 7
 de4:	9f 67       	ori	r25, 0x7F	; 127
 de6:	80 e8       	ldi	r24, 0x80	; 128
 de8:	70 e0       	ldi	r23, 0x00	; 0
 dea:	60 e0       	ldi	r22, 0x00	; 0
 dec:	08 95       	ret

00000dee <__fp_nan>:
 dee:	9f ef       	ldi	r25, 0xFF	; 255
 df0:	80 ec       	ldi	r24, 0xC0	; 192
 df2:	08 95       	ret

00000df4 <__fp_pscA>:
 df4:	00 24       	eor	r0, r0
 df6:	0a 94       	dec	r0
 df8:	16 16       	cp	r1, r22
 dfa:	17 06       	cpc	r1, r23
 dfc:	18 06       	cpc	r1, r24
 dfe:	09 06       	cpc	r0, r25
 e00:	08 95       	ret

00000e02 <__fp_pscB>:
 e02:	00 24       	eor	r0, r0
 e04:	0a 94       	dec	r0
 e06:	12 16       	cp	r1, r18
 e08:	13 06       	cpc	r1, r19
 e0a:	14 06       	cpc	r1, r20
 e0c:	05 06       	cpc	r0, r21
 e0e:	08 95       	ret

00000e10 <__fp_round>:
 e10:	09 2e       	mov	r0, r25
 e12:	03 94       	inc	r0
 e14:	00 0c       	add	r0, r0
 e16:	11 f4       	brne	.+4      	; 0xe1c <__fp_round+0xc>
 e18:	88 23       	and	r24, r24
 e1a:	52 f0       	brmi	.+20     	; 0xe30 <__fp_round+0x20>
 e1c:	bb 0f       	add	r27, r27
 e1e:	40 f4       	brcc	.+16     	; 0xe30 <__fp_round+0x20>
 e20:	bf 2b       	or	r27, r31
 e22:	11 f4       	brne	.+4      	; 0xe28 <__fp_round+0x18>
 e24:	60 ff       	sbrs	r22, 0
 e26:	04 c0       	rjmp	.+8      	; 0xe30 <__fp_round+0x20>
 e28:	6f 5f       	subi	r22, 0xFF	; 255
 e2a:	7f 4f       	sbci	r23, 0xFF	; 255
 e2c:	8f 4f       	sbci	r24, 0xFF	; 255
 e2e:	9f 4f       	sbci	r25, 0xFF	; 255
 e30:	08 95       	ret

00000e32 <__fp_split3>:
 e32:	57 fd       	sbrc	r21, 7
 e34:	90 58       	subi	r25, 0x80	; 128
 e36:	44 0f       	add	r20, r20
 e38:	55 1f       	adc	r21, r21
 e3a:	59 f0       	breq	.+22     	; 0xe52 <__fp_splitA+0x10>
 e3c:	5f 3f       	cpi	r21, 0xFF	; 255
 e3e:	71 f0       	breq	.+28     	; 0xe5c <__fp_splitA+0x1a>
 e40:	47 95       	ror	r20

00000e42 <__fp_splitA>:
 e42:	88 0f       	add	r24, r24
 e44:	97 fb       	bst	r25, 7
 e46:	99 1f       	adc	r25, r25
 e48:	61 f0       	breq	.+24     	; 0xe62 <__fp_splitA+0x20>
 e4a:	9f 3f       	cpi	r25, 0xFF	; 255
 e4c:	79 f0       	breq	.+30     	; 0xe6c <__fp_splitA+0x2a>
 e4e:	87 95       	ror	r24
 e50:	08 95       	ret
 e52:	12 16       	cp	r1, r18
 e54:	13 06       	cpc	r1, r19
 e56:	14 06       	cpc	r1, r20
 e58:	55 1f       	adc	r21, r21
 e5a:	f2 cf       	rjmp	.-28     	; 0xe40 <__fp_split3+0xe>
 e5c:	46 95       	lsr	r20
 e5e:	f1 df       	rcall	.-30     	; 0xe42 <__fp_splitA>
 e60:	08 c0       	rjmp	.+16     	; 0xe72 <__fp_splitA+0x30>
 e62:	16 16       	cp	r1, r22
 e64:	17 06       	cpc	r1, r23
 e66:	18 06       	cpc	r1, r24
 e68:	99 1f       	adc	r25, r25
 e6a:	f1 cf       	rjmp	.-30     	; 0xe4e <__fp_splitA+0xc>
 e6c:	86 95       	lsr	r24
 e6e:	71 05       	cpc	r23, r1
 e70:	61 05       	cpc	r22, r1
 e72:	08 94       	sec
 e74:	08 95       	ret

00000e76 <__fp_zero>:
 e76:	e8 94       	clt

00000e78 <__fp_szero>:
 e78:	bb 27       	eor	r27, r27
 e7a:	66 27       	eor	r22, r22
 e7c:	77 27       	eor	r23, r23
 e7e:	cb 01       	movw	r24, r22
 e80:	97 f9       	bld	r25, 7
 e82:	08 95       	ret

00000e84 <__mulsf3>:
 e84:	0b d0       	rcall	.+22     	; 0xe9c <__mulsf3x>
 e86:	c4 cf       	rjmp	.-120    	; 0xe10 <__fp_round>
 e88:	b5 df       	rcall	.-150    	; 0xdf4 <__fp_pscA>
 e8a:	28 f0       	brcs	.+10     	; 0xe96 <__mulsf3+0x12>
 e8c:	ba df       	rcall	.-140    	; 0xe02 <__fp_pscB>
 e8e:	18 f0       	brcs	.+6      	; 0xe96 <__mulsf3+0x12>
 e90:	95 23       	and	r25, r21
 e92:	09 f0       	breq	.+2      	; 0xe96 <__mulsf3+0x12>
 e94:	a6 cf       	rjmp	.-180    	; 0xde2 <__fp_inf>
 e96:	ab cf       	rjmp	.-170    	; 0xdee <__fp_nan>
 e98:	11 24       	eor	r1, r1
 e9a:	ee cf       	rjmp	.-36     	; 0xe78 <__fp_szero>

00000e9c <__mulsf3x>:
 e9c:	ca df       	rcall	.-108    	; 0xe32 <__fp_split3>
 e9e:	a0 f3       	brcs	.-24     	; 0xe88 <__mulsf3+0x4>

00000ea0 <__mulsf3_pse>:
 ea0:	95 9f       	mul	r25, r21
 ea2:	d1 f3       	breq	.-12     	; 0xe98 <__mulsf3+0x14>
 ea4:	95 0f       	add	r25, r21
 ea6:	50 e0       	ldi	r21, 0x00	; 0
 ea8:	55 1f       	adc	r21, r21
 eaa:	62 9f       	mul	r22, r18
 eac:	f0 01       	movw	r30, r0
 eae:	72 9f       	mul	r23, r18
 eb0:	bb 27       	eor	r27, r27
 eb2:	f0 0d       	add	r31, r0
 eb4:	b1 1d       	adc	r27, r1
 eb6:	63 9f       	mul	r22, r19
 eb8:	aa 27       	eor	r26, r26
 eba:	f0 0d       	add	r31, r0
 ebc:	b1 1d       	adc	r27, r1
 ebe:	aa 1f       	adc	r26, r26
 ec0:	64 9f       	mul	r22, r20
 ec2:	66 27       	eor	r22, r22
 ec4:	b0 0d       	add	r27, r0
 ec6:	a1 1d       	adc	r26, r1
 ec8:	66 1f       	adc	r22, r22
 eca:	82 9f       	mul	r24, r18
 ecc:	22 27       	eor	r18, r18
 ece:	b0 0d       	add	r27, r0
 ed0:	a1 1d       	adc	r26, r1
 ed2:	62 1f       	adc	r22, r18
 ed4:	73 9f       	mul	r23, r19
 ed6:	b0 0d       	add	r27, r0
 ed8:	a1 1d       	adc	r26, r1
 eda:	62 1f       	adc	r22, r18
 edc:	83 9f       	mul	r24, r19
 ede:	a0 0d       	add	r26, r0
 ee0:	61 1d       	adc	r22, r1
 ee2:	22 1f       	adc	r18, r18
 ee4:	74 9f       	mul	r23, r20
 ee6:	33 27       	eor	r19, r19
 ee8:	a0 0d       	add	r26, r0
 eea:	61 1d       	adc	r22, r1
 eec:	23 1f       	adc	r18, r19
 eee:	84 9f       	mul	r24, r20
 ef0:	60 0d       	add	r22, r0
 ef2:	21 1d       	adc	r18, r1
 ef4:	82 2f       	mov	r24, r18
 ef6:	76 2f       	mov	r23, r22
 ef8:	6a 2f       	mov	r22, r26
 efa:	11 24       	eor	r1, r1
 efc:	9f 57       	subi	r25, 0x7F	; 127
 efe:	50 40       	sbci	r21, 0x00	; 0
 f00:	8a f0       	brmi	.+34     	; 0xf24 <__mulsf3_pse+0x84>
 f02:	e1 f0       	breq	.+56     	; 0xf3c <__mulsf3_pse+0x9c>
 f04:	88 23       	and	r24, r24
 f06:	4a f0       	brmi	.+18     	; 0xf1a <__mulsf3_pse+0x7a>
 f08:	ee 0f       	add	r30, r30
 f0a:	ff 1f       	adc	r31, r31
 f0c:	bb 1f       	adc	r27, r27
 f0e:	66 1f       	adc	r22, r22
 f10:	77 1f       	adc	r23, r23
 f12:	88 1f       	adc	r24, r24
 f14:	91 50       	subi	r25, 0x01	; 1
 f16:	50 40       	sbci	r21, 0x00	; 0
 f18:	a9 f7       	brne	.-22     	; 0xf04 <__mulsf3_pse+0x64>
 f1a:	9e 3f       	cpi	r25, 0xFE	; 254
 f1c:	51 05       	cpc	r21, r1
 f1e:	70 f0       	brcs	.+28     	; 0xf3c <__mulsf3_pse+0x9c>
 f20:	60 cf       	rjmp	.-320    	; 0xde2 <__fp_inf>
 f22:	aa cf       	rjmp	.-172    	; 0xe78 <__fp_szero>
 f24:	5f 3f       	cpi	r21, 0xFF	; 255
 f26:	ec f3       	brlt	.-6      	; 0xf22 <__mulsf3_pse+0x82>
 f28:	98 3e       	cpi	r25, 0xE8	; 232
 f2a:	dc f3       	brlt	.-10     	; 0xf22 <__mulsf3_pse+0x82>
 f2c:	86 95       	lsr	r24
 f2e:	77 95       	ror	r23
 f30:	67 95       	ror	r22
 f32:	b7 95       	ror	r27
 f34:	f7 95       	ror	r31
 f36:	e7 95       	ror	r30
 f38:	9f 5f       	subi	r25, 0xFF	; 255
 f3a:	c1 f7       	brne	.-16     	; 0xf2c <__mulsf3_pse+0x8c>
 f3c:	fe 2b       	or	r31, r30
 f3e:	88 0f       	add	r24, r24
 f40:	91 1d       	adc	r25, r1
 f42:	96 95       	lsr	r25
 f44:	87 95       	ror	r24
 f46:	97 f9       	bld	r25, 7
 f48:	08 95       	ret

00000f4a <__udivmodqi4>:
 f4a:	99 1b       	sub	r25, r25
 f4c:	79 e0       	ldi	r23, 0x09	; 9
 f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__udivmodqi4_ep>

00000f50 <__udivmodqi4_loop>:
 f50:	99 1f       	adc	r25, r25
 f52:	96 17       	cp	r25, r22
 f54:	08 f0       	brcs	.+2      	; 0xf58 <__udivmodqi4_ep>
 f56:	96 1b       	sub	r25, r22

00000f58 <__udivmodqi4_ep>:
 f58:	88 1f       	adc	r24, r24
 f5a:	7a 95       	dec	r23
 f5c:	c9 f7       	brne	.-14     	; 0xf50 <__udivmodqi4_loop>
 f5e:	80 95       	com	r24
 f60:	08 95       	ret

00000f62 <__udivmodhi4>:
 f62:	aa 1b       	sub	r26, r26
 f64:	bb 1b       	sub	r27, r27
 f66:	51 e1       	ldi	r21, 0x11	; 17
 f68:	07 c0       	rjmp	.+14     	; 0xf78 <__udivmodhi4_ep>

00000f6a <__udivmodhi4_loop>:
 f6a:	aa 1f       	adc	r26, r26
 f6c:	bb 1f       	adc	r27, r27
 f6e:	a6 17       	cp	r26, r22
 f70:	b7 07       	cpc	r27, r23
 f72:	10 f0       	brcs	.+4      	; 0xf78 <__udivmodhi4_ep>
 f74:	a6 1b       	sub	r26, r22
 f76:	b7 0b       	sbc	r27, r23

00000f78 <__udivmodhi4_ep>:
 f78:	88 1f       	adc	r24, r24
 f7a:	99 1f       	adc	r25, r25
 f7c:	5a 95       	dec	r21
 f7e:	a9 f7       	brne	.-22     	; 0xf6a <__udivmodhi4_loop>
 f80:	80 95       	com	r24
 f82:	90 95       	com	r25
 f84:	bc 01       	movw	r22, r24
 f86:	cd 01       	movw	r24, r26
 f88:	08 95       	ret

00000f8a <__divmodhi4>:
 f8a:	97 fb       	bst	r25, 7
 f8c:	07 2e       	mov	r0, r23
 f8e:	16 f4       	brtc	.+4      	; 0xf94 <__divmodhi4+0xa>
 f90:	00 94       	com	r0
 f92:	07 d0       	rcall	.+14     	; 0xfa2 <__divmodhi4_neg1>
 f94:	77 fd       	sbrc	r23, 7
 f96:	09 d0       	rcall	.+18     	; 0xfaa <__divmodhi4_neg2>
 f98:	0e 94 b1 07 	call	0xf62	; 0xf62 <__udivmodhi4>
 f9c:	07 fc       	sbrc	r0, 7
 f9e:	05 d0       	rcall	.+10     	; 0xfaa <__divmodhi4_neg2>
 fa0:	3e f4       	brtc	.+14     	; 0xfb0 <__divmodhi4_exit>

00000fa2 <__divmodhi4_neg1>:
 fa2:	90 95       	com	r25
 fa4:	81 95       	neg	r24
 fa6:	9f 4f       	sbci	r25, 0xFF	; 255
 fa8:	08 95       	ret

00000faa <__divmodhi4_neg2>:
 faa:	70 95       	com	r23
 fac:	61 95       	neg	r22
 fae:	7f 4f       	sbci	r23, 0xFF	; 255

00000fb0 <__divmodhi4_exit>:
 fb0:	08 95       	ret

00000fb2 <__tablejump2__>:
 fb2:	ee 0f       	add	r30, r30
 fb4:	ff 1f       	adc	r31, r31

00000fb6 <__tablejump__>:
 fb6:	05 90       	lpm	r0, Z+
 fb8:	f4 91       	lpm	r31, Z
 fba:	e0 2d       	mov	r30, r0
 fbc:	09 94       	ijmp

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>
